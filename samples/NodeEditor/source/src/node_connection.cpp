/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QMessageBox>
#include <QStyleOptionGraphicsItem>
#include <QPen>
#include <QBrush>
#include <QColor>
#include "node_connection.h"
#include "node_port.h"
#include "node_node.h"

namespace Magus
{
    //****************************************************************************/
    QtConnection::QtConnection(QtPort* basePort, QGraphicsPathItem* parent) : QGraphicsPathItem(parent)
    {
        setPen(QPen(Qt::black, 3));
        setBrush(Qt::NoBrush);
        mTargetPort = 0;
        mBasePort = basePort;
        mColor = Qt::black;
    }

    //****************************************************************************/
    QtConnection::~QtConnection(void)
    {
    }

    //****************************************************************************/
    void QtConnection::setSelected(bool selected)
    {
        if (selected)
        {
            setPen(QPen(QColor("#cc7800"), 3));
        }
        else
        {
            setPen(QPen(mColor, 3));
        }
    }

    //****************************************************************************/
    void QtConnection::setBasePort(QtPort* basePort)
    {
        mBasePort = basePort;
    }

    //****************************************************************************/
    QtPort* QtConnection::getBasePort(void)
    {
        return mBasePort;
    }

    //****************************************************************************/
    void QtConnection::setTargetPort(QtPort* targetPort)
    {
        mTargetPort = targetPort;
    }

    //****************************************************************************/
    QtPort* QtConnection::getTargetPort(void)
    {
        return mTargetPort;
    }

    //****************************************************************************/
    void QtConnection::updatePath(const QPointF& altTargetPos)
    {
        QPointF basePos = mBasePort->scenePos();
        QPointF targetPos;
        if (mTargetPort)
        {
            targetPos = mTargetPort->scenePos();
                //QMessageBox::information(0, "test", "test"); // Test
        }
        else
            targetPos = altTargetPos;

        QPainterPath p;
        p.moveTo(basePos);
        qreal dx = targetPos.x() - basePos.x();
        qreal dy = targetPos.y() - basePos.y();
        QPointF ctr1(basePos.x() + dx * 0.45, basePos.y() + dy * 0.1);
        QPointF ctr2(basePos.x() + dx * 0.55, basePos.y() + dy * 0.9);
        p.cubicTo(ctr1, ctr2, targetPos);
        setPath(p);
    }

    //****************************************************************************/
    void QtConnection::setColor(const QColor& color)
    {
        mColor = color;
        setPen(QPen(mColor, 3));
    }

    //****************************************************************************/
    bool QtConnection::isNodeConnectedToThisConnection(QtNode* node)
    {
        if (mBasePort)
            return (node == mBasePort->parentItem());
        else if (mTargetPort)
            return (node == mTargetPort->parentItem());
        else
            return false;
    }

}
