/****************************************************************************
**
** Copyright (C) 2014
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QString>
#include <QFile>
#include <QMenuBar>
#include "mainwindow.h"
#include "node_node.h"
#include "node_port.h"
#include "node_porttype.h"

//****************************************************************************/
MainWindow::MainWindow(void) : mIsClosing(false)
{
	// Perform standard functions
    mCount = 1;
    createActions();
    createMenus();
    createToolBars();
    createStatusBar();
    createDockWindows();

    // Set the title
    setWindowTitle(QString("NodeEditor"));

    // Set the stylesheet of the application
    QFile File(QString("dark.qss"));
    File.open(QFile::ReadOnly);
    QString styleSheet = QLatin1String(File.readAll());
    setStyleSheet(styleSheet);

    // Create the node editor widget
    mNodeEditor = new Magus::QtNodeEditor(this);
    setCentralWidget(mNodeEditor);
    showMaximized();
}

//****************************************************************************/
MainWindow::~MainWindow(void)
{

}

//****************************************************************************/
void MainWindow::closeEvent(QCloseEvent* event)
{
    mIsClosing = true;
}

//****************************************************************************/
void MainWindow::createActions(void)
{
    mAddnodeMenuAction = new QAction(QString("Add node"), this);
    connect(mAddnodeMenuAction, SIGNAL(triggered()), this, SLOT(doAddnodeMenuAction()));
    mQuitMenuAction = new QAction(QString("Quit"), this);
    connect(mQuitMenuAction, SIGNAL(triggered()), this, SLOT(doQuitMenuAction()));
}

//****************************************************************************/
void MainWindow::createMenus(void)
{
    mNodeMenu = menuBar()->addMenu(QString("Node"));
    mNodeMenu->addAction(mAddnodeMenuAction);
    mNodeMenu->addAction(mQuitMenuAction);
}

//****************************************************************************/
void MainWindow::createToolBars(void)
{

}

//****************************************************************************/
void MainWindow::createStatusBar(void)
{

}

//****************************************************************************/
void MainWindow::createDockWindows(void)
{

}

//****************************************************************************/
void MainWindow::doAddnodeMenuAction(void)
{
    // Create a node, configure it and add it to the editor
    Magus::QtInputPortType inputPortType;
    Magus::QtOutputPortType outputPortType;

    Magus::QtNode* node = new Magus::QtNode(QString("Test node"));
    node->setTitleColor(Qt::white);
    node->setHeaderTitleIcon("../common/icons/cube_bold.png");
    node->setAction1Icon("../common/icons/minmax.png");
    node->setAction2Icon("../common/icons/close.png");
    node->alignTitle(Magus::ALIGNED_LEFT);
    QColor color(rand() % 255, rand() % 255, rand() % 255);
    node->setHeaderColor(color);
    node->createPort(1,
                     QString("input ") + QVariant(mCount).toString(),
                     inputPortType,
                     Qt::red,
                     Magus::PORT_SHAPE_CIRCLE,
                     Magus::ALIGNED_LEFT, Qt::red);
    node->createPort(2,
                     QString("output ") + QVariant(mCount).toString(),
                     outputPortType,
                     Qt::green,
                     Magus::PORT_SHAPE_SQUARE,
                     Magus::ALIGNED_RIGHT,
                     Qt::green);
    ++mCount;
    node->setPortNameColor(Qt::white);
    mNodeEditor->addNode(node);
}

//****************************************************************************/
void MainWindow::doQuitMenuAction(void)
{
    close();
}


//****************************************************************************/
void MainWindow::update(void)
{

}
