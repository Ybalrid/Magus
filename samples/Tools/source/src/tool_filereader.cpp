/****************************************************************************
**
** Copyright (C) 2015
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QDir>
#include <QFileDialog>
#include <QMessageBox>
#include "tool_filereader.h"
#include "generic_funtions.h"

namespace Magus
{
    //****************************************************************************/
    QtFileReader::QtFileReader(void)
    {
    }

    //****************************************************************************/
    QtFileReader::~QtFileReader(void)
    {
    }

    //****************************************************************************/
    const QVector<QPixmap>& QtFileReader::readTexturesRecursively(const QString& searchPath)
    {
        mPixmapVec.clear();

        // Get all texture files from all dirs/subdirs
        QDir dir(searchPath);
        dir.makeAbsolute();

        if (dir.exists())
        {
            Q_FOREACH(QFileInfo info, dir.entryInfoList(QDir::NoDotAndDotDot | QDir::System | QDir::Hidden  | QDir::AllDirs | QDir::Files, QDir::DirsFirst))
            {
                if (info.isDir())
                {
                    readTexturesRecursively(info.absoluteFilePath());
                }
                else
                {
                    QString fileName = info.absoluteFilePath();
                    if (isImageBasedOnExtension(fileName))
                    {
                        // It is an image
                        QPixmap texturePixmap = QPixmap(info.absoluteFilePath());
                        mPixmapVec.append(texturePixmap);
                        emit textureRead(texturePixmap, info.absoluteFilePath(), info.fileName());
                        emit fileRead(info.path(), info.absoluteFilePath(), info.fileName());
                    }
                }
            }
        }

        return mPixmapVec;
    }

    //****************************************************************************/
    const QVector<QString>& QtFileReader::readFileNamesRecursively(const QString& searchPath, QString& mask)
    {
        mStringVec.clear();

        // Get all filenames from all dirs/subdirs with the specified mask
        QDir dir(searchPath);
        dir.makeAbsolute();

        if (dir.exists())
        {
            Q_FOREACH(QFileInfo info, dir.entryInfoList(QDir::NoDotAndDotDot | QDir::System | QDir::Hidden  | QDir::AllDirs | QDir::Files, QDir::DirsFirst))
            {
                if (info.isDir())
                {
                    readFileNamesRecursively(info.absoluteFilePath(), mask);
                }
                else
                {
                    QString fileName = info.absoluteFilePath();
                    //QMessageBox::information(0, "test", fileName); // Test
                    // TODO: Filter by mask
                    emit fileRead(info.path(), info.absoluteFilePath(), info.fileName());
                }
            }
        }

        return mStringVec;
    }

    //****************************************************************************/
    const QString& QtFileReader::readFileName(const QString& title, const QString& path, const QString& filter)
    {
        QFileDialog fileDialog;
        mFileName = fileDialog.getOpenFileName(0, title, path, filter);
        if (!mFileName.isEmpty())
        {
            QFileInfo info(mFileName);
            emit fileRead(path, mFileName, info.fileName());
        }

        return mFileName;
    }

    //****************************************************************************/
    const QMap<QString, QFileInfo>& QtFileReader::readFileNames(const QString& title, const QString& path, const QString& filter)
    {
        QFileDialog fileDialog;
        mFileInfoMap.clear();
        mFileNames = fileDialog.getOpenFileNames(0, title, path, filter);
        foreach(QString fileName, mFileNames)
        {
            if (!fileName.isEmpty())
            {
                QFileInfo info(fileName);
                mFileInfoMap[fileName] = info;
                emit fileRead(path, fileName, info.fileName());
                //QMessageBox::information(0, "test", info.fileName()); // Test
            }
        }

        return mFileInfoMap;
    }
}
