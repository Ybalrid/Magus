/****************************************************************************
**
** Copyright (C) 2014
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef MAGUS_TOOL_GRADIENT_H
#define MAGUS_TOOL_GRADIENT_H

#include <QGraphicsItem>
#include <QGraphicsPathItem>
#include <QGraphicsSceneMouseEvent>
#include <QGraphicsScene>
#include <QBrush>
#include <QPen>
#include <QSize>

QT_BEGIN_NAMESPACE

QT_END_NAMESPACE

namespace Magus
{
    static const qreal DEFAULT_GRADIENT_HEIGHT = 48; // Default height of the gradient

    // Struct, used to store id, fraction and color value
    struct QtColorFraction
    {
        int id;
        qreal fraction;
        QColor color;
    };

    // Struct, used to store id, fraction and alpha value
    struct QtAlphaFraction
    {
        int id;
        qreal fraction;
        int alpha;
    };

    /****************************************************************************
    QtGradient is the gradient rectangle, displayed in a QtGradientWidget.
    ***************************************************************************/
    class QtGradient: public QObject, public QGraphicsPathItem
    {
        Q_OBJECT

        public:
            QtGradient(QGraphicsItem* parent = 0);
            virtual ~QtGradient(void);

            // Initialize (clear) the gradient; remove the color and alpha values
            void init (void);

            // Add a color to the gradient
            void addColor (int id, qreal fraction, const QColor& color);

            // A previously added color marker changes fraction value
            void changeColorFraction (int id, qreal newFraction);

            // A previously added color marker changes color value
            void changeColor (int id, const QColor& newColor);

            // Delete a color from the gradient
            void deleteColor (int id);

            // Add an alpha value to the gradient
            void addAlpha (int id, qreal fraction, int alpha);

            // A previously added alpha marker changes fraction value
            void changeAlphaFraction(int id, qreal newFraction);

            // A previously added alpha marker changes alpha value
            void changeAlpha (int id, int newAlpha);

            // Delete an alpha marker from the gradient
            void deleteAlpha (int id);

            // Set/get the width and height of the gradient
            void setSize (QSizeF size);
            QSizeF getSize(void) const {return mSize;};

            // Draw the gradient
            void drawGradient (void);

            // Return the number of alpha markers
            qreal getNumAlpha (void) const;

            // Return the number of color markers
            qreal getNumColor (void) const;

            // Returns colors, without alpha values
            QMultiMap<qreal, QColor> getColorMap(void);

            // Returns alpha values
            QMultiMap<qreal, int> getAlphaMap(void);

            // Return the colors, including the interpolated alpha values
            QMultiMap<qreal, QColor> exportColorAndAlpha(void);

            // Used for testing
            void importColorAndAlpha(QMultiMap<qreal, QColor> colorMap);

        protected:
            // Draw the background
            void drawBackground (void);

            // Determines the alpha value, based on its fraction value
            int getInterpolatedAlpha (qreal colorFraction);

        private:
            QSizeF mSize;
            QMultiMap<qreal, QtColorFraction> mColorFractionMap;
            QMultiMap<qreal, QtAlphaFraction>mAlphaFractionMap;
            QGraphicsPathItem* mBackground;
            QGraphicsPathItem* mForeground;
    };
}

#endif
