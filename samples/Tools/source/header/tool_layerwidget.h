/****************************************************************************
**
** Copyright (C) 2015
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef MAGUS_TOOL_LAYER_WIDGET_H
#define MAGUS_TOOL_LAYER_WIDGET_H

#include <QMenu>
#include <QWidget>
#include <QMouseEvent>
#include <QTableWidget>
#include <QTableWidgetItem>
#include <QLineEdit>
#include "tool_sceneviewwidget.h"

QT_BEGIN_NAMESPACE

QT_END_NAMESPACE

namespace Magus
{
    static const int TOOL_LAYER_ICON_WIDTH = 24;
    static const int TOOL_LAYER_NAME_WIDTH = 200;
    static const int TOOL_LAYER_COLUMN_ICON = 0;
    static const int TOOL_LAYER_COLUMN_NAME = 1;
    static const int TOOL_LAYER_COLUMN_VISIBILITY = 2;
    static const QString TOOL_LAYER_ACTION_CREATE_LAYER = "Create empty layer";
    static const QString TOOL_LAYER_ACTION_DELETE_LAYER = "Delete layer";
    static const QString TOOL_LAYER_ACTION_RENAME_LAYER = "Rename";
    static const QString TOOL_LAYER_ACTION_ALL_VISIBLE = "Make all layers visible";
    static const QString TOOL_ICON_LAYER = QString("layer_bold.png");
    static const QString TOOL_ICON_VIEW_VISIBLE = QString("view_visible_bold.png");
    static const QString TOOL_ICON_VIEW_INVISIBLE = QString("view_invisible_bold.png");


    /****************************************************************************
    Struct for layer
    ***************************************************************************/
    struct QtLayer
    {
        int layerId;
        QString name;
        bool visible;
    };

    /****************************************************************************
    Main class for layer widget. This widgets displays layers. The layers can
    be asociated with certain assets. The QtLayerWidget has optional relations
    with the QtSceneViewWidget class:
    - QtSceneViewWidget passed as argument while creating a QtLayerWidget object
      (mSceneViewWidget).
      In this case, the QtSceneViewWidget creates a sceneview object (QTreeWidget)
      for each layer. Assets can be assigned to the layer and show up in the
      QTreeWidget.
    - QtSceneViewWidget passed as argument in QtLayerWidget::setListenToSceneViewWidget
      (mListenToSceneViewWidget).
      This is a different QtSceneViewWidget, which usually represents all assets
      of a 3d scene or of a project. Items (assets) of this QtSceneViewWidget can
      be dropped onto a layer within the QtLayerWidget. The QtLayerWidget decides
      what to do with this (eg. add it to the QTreeWidget of the associated
      QtSceneViewWidget).
    ***************************************************************************/
    class QtLayerWidget : public QWidget
    {
        Q_OBJECT

        public:
            QtLayerWidget(const QString& iconDir, QtSceneViewWidget* sceneViewWidget = 0, QWidget* parent = 0);
            virtual ~QtLayerWidget(void);
            bool eventFilter(QObject* object, QEvent* event);

            // Create a new layer
            const QtLayer* createLayer(const QString& name);

            // Create a new layer (with layerId)
            const QtLayer* createLayer(int layerId, const QString& name);

            // Add a precreated layer; the layer object is managed (and deleted) by the QtLayerWidget
            void addLayer(QtLayer* layer);

            // Delete a layer (by name)
            void deleteLayer (const QString& name);

            // Delete a layer (by pointer)
            void deleteLayer (const QtLayer* layer);

            // Delete a layer (by layerId)
            void deleteLayer (int layerId);

            // Set the (name) name of the layer, identified by the (unique) layerId
            void setLayerName(int layerId, const QString& newName);

            // Get a layer (by name)
            QtLayer* getLayer(const QString& name);

            // Get a layer (by layerId)
            QtLayer* getLayer(int layerId);

            // Give list of all layers
            QVector<QtLayer*> getLayers(void);

            // Return the id of the currently selected layer
            int getCurrentLayerId(void);

            // Set a sceneviewwidget; this widgets is used to determine the item dragged and dropped
            // The sceneId identifies the scene(view) that is associated with this layer widget
            void setListenToSceneViewWidget(QtSceneViewWidget* sceneViewWidget,
                                            bool listenToDropEvents = true,
                                            bool listenToDeleteEvents = true,
                                            int sceneId = 0);


            // The QtLayerWidget does not respons to drop events (from QtSceneViewWidget set by setListenToSceneViewWidget)
            void setListenToDropEvents (bool listenToDropEvents = true);

            // The QtLayerWidget does not respons to delete events (from QtSceneViewWidget set by setListenToSceneViewWidget)
            // Note:
            // This function does not have any meaning if QtSceneViewWidget set not set by means of setListenToSceneViewWidget
            void setListenToDeleteEvents (bool listenToDeleteEvents = true);

            // Return the list of layers with a given name pattern
            //QVector<Layer*> findByName(const QString& namePattern);

        public slots:
            // Activated when a contextmenu item is selected
            void contextMenuItemSelected(QAction* action);

            // Activated when an item in the table is selected
            void tableClicked(QModelIndex index);

            // Activated when a group of the ListenToSceneViewWidget is deleted
            void groupDeleted(int sceneId, int groupId);

            // Activated when an asset of the ListenToSceneViewWidget is deleted
            void assetDeleted(int sceneId, int groupId, int assetId);

        signals:
            // Emitted when the visibility of a layer is enabled or disabled; layerId, name and visibility is passed
            void layerVisibiltyChanged(int layerId, const QString& name, bool visible);

            // Emitted when a layer is created or added; layerId and name of the deleted layer is passed
            void layerCreatedOrAdded(int layerId, const QString& name);

            // Emitted when a layer is deleted; layerId and name of the deleted layer is passed
            void layerDeleted(int layerId, const QString& name);

            // Emitted when a layer is selected; layerId and name of the selected layer is passed
            void layerSelected(int layerId, const QString& name);

        protected:
            void mouseClickHandler(QMouseEvent* event);
            void mouseDblClickHandler(QMouseEvent* event);
            void dropHandler(QObject* object, QEvent* event);
            void updateVisibilityIcon(int row, bool visible);
            int newLayerId(void);
            int getRow(const QString& name);
            int getRow(int layerId);
            int removeFromLayerVec(int row);
            const QString& getName(int row);

        private:
            QString mIconDir;
            QtSceneViewWidget* mSceneViewWidget; // Used to create a sceneview for each layer
            QtSceneViewWidget* mListenToSceneViewWidget; // Used for drag and drop
            bool mListenToDropEvents;
            bool mListenToDeleteEvents;
            int mListenToSceneId;
            int mLayerIdCounter;
            QVector<QtLayer*> mLayerVec; // Use this for additional data
            QTableWidget* mTable;
            QMenu* mContextMenu;
            QString mTempName;
    };
}

#endif
