/****************************************************************************
**
** Copyright (C) 2014
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include "tool_resourcewidget.h"
#include "tool_resourcewidget_assets.h"

namespace Magus
{
    //****************************************************************************/
    QtAssetsDockWidget::QtAssetsDockWidget(const QString& iconDir, const QString& title, QMainWindow* parent, Qt::WindowFlags flags) :
        QDockWidget (title, parent, flags),
        mParent(parent)
    {
        mIconDir = iconDir;
        mInnerMain = new QMainWindow();
        setWidget(mInnerMain);
        mTabWidget = new QTabWidget(mInnerMain);
        mInnerMain->setCentralWidget(mTabWidget);
        mTabWidget->show();
        QWidget* oldTitleBar = titleBarWidget();
        setTitleBarWidget(new QWidget());
        delete oldTitleBar;

        // Create audio selection widget
        mAudioSelection = new QtAudioWidget(mIconDir, this);
        mAudioSelection->setTextureSize(QSize(112, 120));

        // Create material selection widget
        mMaterialSelection = new QtGenericAssetWidget(true, this);
        mMaterialSelection->setTextureSize(QSize(112, 120));

        // Create mesh selection widget
        mMeshSelection = new QtGenericAssetWidget(false, this);
        mMeshSelection->setTextureSize(QSize(112, 120));

        // Create script selection widget
        mScriptSelection = new QtGenericAssetWidget(true, this);
        mScriptSelection->setTextureSize(QSize(112, 120));

        // Create texture selection widget
        mTextureSelection = new QtDefaultTextureWidget(this);
        mTextureSelection->setTextureSize(QSize(112, 120));

        // -------------------------------------- Fill the assets widget --------------------------------------
        QIcon audioIcon(mIconDir + TOOL_RESOURCE_ICON_AUDIO);
        QIcon materialIcon(mIconDir + TOOL_RESOURCE_ICON_MATERIAL);
        QIcon meshIcon(mIconDir + TOOL_RESOURCE_ICON_MESH);
        QIcon scriptIcon(mIconDir + TOOL_RESOURCE_ICON_SCRIPT);
        QIcon textureIcon(mIconDir + TOOL_RESOURCE_ICON_TEXTURE);
        addTab(mAudioSelection, audioIcon, QString("Audio"));
        addTab(mMaterialSelection, materialIcon, QString("Materials"));
        addTab(mMeshSelection, meshIcon, QString("Meshes"));
        addTab(mScriptSelection, scriptIcon, QString("Scripts"));
        addTab(mTextureSelection, textureIcon, QString("Textures"));

        // Perform standard functions
        createActions();
        createMenus();
        createToolBars();

        connect(mTabWidget, SIGNAL(currentChanged(int)), this, SLOT(handleTabChanged(int)));
}

    //****************************************************************************/
    QtAssetsDockWidget::~QtAssetsDockWidget(void)
    {
    }

    //****************************************************************************/
    void QtAssetsDockWidget::addTab(QWidget* widget, const QIcon& icon, const QString name)
    {
        mTabWidget->addTab(widget, icon, name);
    }

    //****************************************************************************/
    void QtAssetsDockWidget::createActions(void)
    {
    }

    //****************************************************************************/
    void QtAssetsDockWidget::createMenus(void)
    {
    }

    //****************************************************************************/
    void QtAssetsDockWidget::createToolBars(void)
    {
    }

    //****************************************************************************/
    void QtAssetsDockWidget::addAsset(int toplevelId, int parentId, int resourceId, const QString& name, const QString& baseName)
    {
        switch (toplevelId)
        {
            case TOOL_SOURCES_LEVEL_X000_AUDIO:
            {
                // Add file(name) to mAudioSelection
                mAudioSelection->addAudio(SOURCE_FILE, name, baseName);
            }
            break;

            case TOOL_SOURCES_LEVEL_X000_MATERIALS:
            {
                // Add file(name) to mMaterialSelection
                QPixmap pixmap(mIconDir + TOOL_GENERIC_ASSETWIDGET_ICON_MATERIAL);
                mMaterialSelection->addAsset(pixmap, name, baseName);
            }
            break;

            case TOOL_SOURCES_LEVEL_X000_MESHES:
            {
                // Add file(name) to mMeshSelection
                QPixmap pixmap(mIconDir + TOOL_GENERIC_ASSETWIDGET_ICON_MESH);
                mMeshSelection->addAsset(pixmap, name, baseName);
            }
            break;

            case TOOL_SOURCES_LEVEL_X000_SCRIPTS:
            {
                // Add file(name) to mScriptSelection
                QPixmap pixmap(mIconDir + TOOL_GENERIC_ASSETWIDGET_ICON_SCRIPT);
                mScriptSelection->addAsset(pixmap, name, baseName);
            }
            break;

            case TOOL_SOURCES_LEVEL_X000_TEXTURES:
            {
                // Add pixmap from file to mTextureSelection
                QPixmap pixmap(name);
                mTextureSelection->addTexture(pixmap, name, baseName);
            }
            break;
        }
    }

    //****************************************************************************/
    void QtAssetsDockWidget::selectTab(int toplevelId, int parentId, int resourceId, const QString& name, const QString& baseName)
    {
        mTabWidget->setCurrentIndex(toplevelId-1); // Assume that toplevelId follows pattern 1, 2, 3, 4, 5
    }

    //****************************************************************************/
    void QtAssetsDockWidget::deleteAsset(int toplevelId, const QString& name)
    {
        switch (toplevelId)
        {
            case TOOL_SOURCES_LEVEL_X000_AUDIO:
            {
                // Delete from mAudioSelection
                mAudioSelection->deleteAudio(name);
            }
            break;

            case TOOL_SOURCES_LEVEL_X000_MATERIALS:
            {
                // Delete from mMaterialSelection
                mMaterialSelection->deleteAsset(name);
            }
            break;

            case TOOL_SOURCES_LEVEL_X000_MESHES:
            {
                // Delete from mMeshSelection
                mMeshSelection->deleteAsset(name);
            }
            break;

            case TOOL_SOURCES_LEVEL_X000_SCRIPTS:
            {
                // Delete from mScriptSelection
                mScriptSelection->deleteAsset(name);
            }
            break;

            case TOOL_SOURCES_LEVEL_X000_TEXTURES:
            {
                // Delete from mTextureSelection
                mTextureSelection->deleteTexture(name);
            }
            break;
        }
    }

    //****************************************************************************/
    void QtAssetsDockWidget::filter(const QString& pattern)
    {
        resetFilter();
        mAudioSelection->filter(pattern);
        mMaterialSelection->filter(pattern);
        mMeshSelection->filter(pattern);
        mScriptSelection->filter(pattern);
        mTextureSelection->filter(pattern);
    }

    //****************************************************************************/
    void QtAssetsDockWidget::resetFilter(void)
    {
        mAudioSelection->resetFilter();
        mMaterialSelection->resetFilter();
        mMeshSelection->resetFilter();
        mScriptSelection->resetFilter();
        mTextureSelection->resetFilter();
    }

    //****************************************************************************/
    void QtAssetsDockWidget::handleTabChanged(int index)
    {
        emit tabChanged(index + 1);
    }

}
