/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef MAGUS_TOOL_FILEREADER_H
#define MAGUS_TOOL_FILEREADER_H

#include <QPixmap>
#include <QFileInfo>
#include <QMap>

QT_BEGIN_NAMESPACE

QT_END_NAMESPACE

namespace Magus
{
    /****************************************************************************
    The QtFileReader is a helper class that reads files and emits signals for
    all other objects (widgets) that are connected to it. This way it becomes
    possible to separate the file I/O from the actual widget, making the widget
    indepent from the filesystem.
    ***************************************************************************/
    class QtFileReader : public QObject
    {
        Q_OBJECT

        public:
            QtFileReader(void);
            virtual ~QtFileReader(void);


            // Read files and emit a signal for each file detected. The filenames are also returned as a
            // vector. Only files that match the 'mask' are taken into account.
            // The searchPath is scanned recursively and all files are read
            // Note, that it can take a while to scane the whole directorytree
            const QVector<QString>& readFileNamesRecursively(const QString& searchPath, QString& mask);

            // Read texture files and emit a signal for each texture read. The texture files are also returned as a
            // vector, containing pixmaps.
            // The searchPath is scanned recursively and all texture files are read
            // Note, that it can take a while to scane the whole directorytree
            const QVector<QPixmap>& readTexturesRecursively(const QString& searchPath);

            // Opens a file dialog. The selected filename is returned, but also emitted.
            const QString& readFileName(const QString& text, const QString& path, const QString& filter);

            // Opens a file dialog. The selected filenames are returned as a map, but also emitted.
            const QMap<QString, QFileInfo>& readFileNames(const QString& title, const QString& path, const QString& filter);

        signals:
            // Emitted when an image file has been read. Both the image file and the filename/basename are passed as an argument
            void textureRead(const QPixmap& pixmap, const QString& fileName, const QString& baseName);

            // Emitted when a file has been read. The filename, basename and path are passed as an argument
            void fileRead(const QString& path, const QString& fileName, const QString& baseName);

    private:
            QVector<QString> mStringVec;
            QVector<QPixmap> mPixmapVec;
            QFileInfo mFileInfo;
            QMap<QString, QFileInfo> mFileInfoMap;
            QString mFileName;
            QStringList mFileNames;

    };
}

#endif
