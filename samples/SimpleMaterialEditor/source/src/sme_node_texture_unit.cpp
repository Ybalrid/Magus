/****************************************************************************
**
** Copyright (C) 2014
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include "sme_node_texture_unit.h"
#include "sme_node_porttype.h"
#include "constants.h"

namespace Magus
{
    //****************************************************************************/
    QtNodeTextureUnit::QtNodeTextureUnit(QString title, QGraphicsItem* parent) : QtNode(title, parent)
    {
        mTextureFileName = QString("");

        // Define the connection policy
        QtPassInPortType passInPortType;
        QtTextureUnitOutPortType textureUnitOutPortType;
        passInPortType.addPortTypeToConnectionPolicy(textureUnitOutPortType);

        // Custome node settings
        setTitleColor(Qt::white);
        setHeaderTitleIcon(ICON_TEXTURE_BOLD);
        setAction1Icon(ICON_MINMAX);
        setAction2Icon(ICON_CLOSE);
        alignTitle(ALIGNED_LEFT);
        setHeaderColor(QColor("#C74E4C"));
        createPort(PORT_ID_TEXTURE_UNIT,
                    PORT_PASS_IN,
                    passInPortType,
                    QColor("#5D964E"),
                    PORT_SHAPE_CIRCLE,
                    ALIGNED_LEFT,
                    QColor("#5D964E"));
        setPortNameColor(Qt::white);
        setZoom(0.9);
    }

    //****************************************************************************/
    QtNodeTextureUnit::~QtNodeTextureUnit(void)
    {
    }

    //****************************************************************************/
    const QString& QtNodeTextureUnit::getTextureFileName(void) const
    {
        return mTextureFileName;
    }

    //****************************************************************************/
    void QtNodeTextureUnit::setTextureFileName (const QString& textureFileName)
    {
        mTextureFileName = textureFileName;
        setImage(textureFileName);
    }

    //****************************************************************************/
    const QString& QtNodeTextureUnit::getTextureBaseFileName(void) const
    {
        return mTextureBaseFileName;
    }

    //****************************************************************************/
    void QtNodeTextureUnit::setTextureBaseFileName (const QString& textureBaseFileName)
    {
        mTextureBaseFileName = textureBaseFileName;
    }

}
