/****************************************************************************
**
** Copyright (C) 2014
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include "mainwindow.h"
#include "Editor_dockwidget.h"
#include "constants.h"
#include "sme_asset_material.h"
#include "sme_node_material.h"
#include "sme_asset_technique.h"
#include "sme_node_technique.h"
#include "sme_asset_pass.h"
#include "sme_node_pass.h"
#include "sme_asset_texture_unit.h"
#include "sme_node_texture_unit.h"

//****************************************************************************/
EditorDockWidget::EditorDockWidget(QString title, MainWindow* parent, Qt::WindowFlags flags) : 
	QDockWidget (title, parent, flags), 
	mParent(parent)
{
    mInnerMain = new QMainWindow();
    setWidget(mInnerMain);

    // Perform standard functions
    createActions();
    createMenus();
    createToolBars();

    // Create the node editor widget.
    mNodeEditor = new Magus::QtNodeEditor(this);
    mNodeEditor->setMenuSelectionToCompoundEnabled(false); // Enabling this makes it a bit more complicated
    mNodeEditor->setMenuExpandCompoundsEnabled(false); // No compounds are used
    connect(mNodeEditor, SIGNAL(nodeRemoved(QtNode*)), this, SLOT(nodeDeleted()));
    connect(mNodeEditor, SIGNAL(nodeSelected(QtNode*)), this, SLOT(nodeSelected(QtNode*)));
    mInnerMain->setCentralWidget(mNodeEditor);
    mMaterialNode = 0;
}

//****************************************************************************/
EditorDockWidget::~EditorDockWidget(void)
{
}

//****************************************************************************/
void EditorDockWidget::createActions(void)
{
    mMaterialHToolbarAction = new QAction(QIcon(ICON_MATERIAL), QString("Add a material node to the editor"), this);
    connect(mMaterialHToolbarAction, SIGNAL(triggered()), this, SLOT(doMaterialHToolbarAction()));
    mTechniqueHToolbarAction = new QAction(QIcon(ICON_TECHNIQUE), QString("Add a technique node to the editor"), this);
    connect(mTechniqueHToolbarAction, SIGNAL(triggered()), this, SLOT(doTechniqueHToolbarAction()));
    mPassHToolbarAction = new QAction(QIcon(ICON_PASS), QString("Add a pass node to the editor"), this);
    connect(mPassHToolbarAction, SIGNAL(triggered()), this, SLOT(doPassHToolbarAction()));
    mTextureHToolbarAction = new QAction(QIcon(ICON_TEXTURE), QString("Add a texture unit node to the editor"), this);
    connect(mTextureHToolbarAction, SIGNAL(triggered()), this, SLOT(doTextureHToolbarAction()));
    mCogHToolbarAction = new QAction(QIcon(ICON_COG), QString("Generate material"), this);
    connect(mCogHToolbarAction, SIGNAL(triggered()), this, SLOT(doCogHToolbarAction()));
}

//****************************************************************************/
void EditorDockWidget::createMenus(void)
{

}

//****************************************************************************/
void EditorDockWidget::createToolBars(void)
{
    mHToolBar = new QToolBar();
    mInnerMain->addToolBar(Qt::TopToolBarArea, mHToolBar);
    mHToolBar->setMinimumHeight(TB_ICON_AND_SPACING);
    mHToolBar->setMinimumWidth(1200);
    mHToolBar->addAction(mMaterialHToolbarAction);
    mHToolBar->addAction(mTechniqueHToolbarAction);
    mHToolBar->addAction(mPassHToolbarAction);
    mHToolBar->addAction(mTextureHToolbarAction);
    mHToolBar->addAction(mCogHToolbarAction);
}

//****************************************************************************/
void EditorDockWidget::doMaterialHToolbarAction(void)
{
    // Add a material node; only 1 is allowed
    if (!mMaterialNode)
    {
        mMaterialNode = new Magus::QtNodeMaterial(NODE_TITLE_MATERIAL);
        mNodeEditor->addNode(mMaterialNode);
    }
}

//****************************************************************************/
void EditorDockWidget::doTechniqueHToolbarAction(void)
{
    // Add a technique node
    Magus::QtNodeTechnique* techniqueNode = new Magus::QtNodeTechnique(NODE_TITLE_TECHNIQUE);
    mNodeEditor->addNode(techniqueNode);
}

//****************************************************************************/
void EditorDockWidget::doPassHToolbarAction(void)
{
    // Add a pass node
    Magus::QtNodePass* passNode = new Magus::QtNodePass(NODE_TITLE_PASS);
    mNodeEditor->addNode(passNode);
}

//****************************************************************************/
void EditorDockWidget::doTextureHToolbarAction(void)
{
    // Add a texture unit node
    Magus::QtNodeTextureUnit* textureUnitNode = new Magus::QtNodeTextureUnit(NODE_TITLE_TEXTURE_UNIT);
    mNodeEditor->addNode(textureUnitNode);
}

//****************************************************************************/
void EditorDockWidget::doCogHToolbarAction(void)
{
    if (!mMaterialNode)
        return;

    if (mMaterialNode->getMaterialName().isEmpty())
        return;

    // ---------------------------------------- Create a material ----------------------------------------
    Ogre::LogManager* logManager = Ogre::LogManager::getSingletonPtr();
    Ogre::MaterialManager* materialManager = Ogre::MaterialManager::getSingletonPtr();
    Ogre::String materialName = mMaterialNode->getMaterialName().toStdString(); // Convert to std format
    logManager->logMessage("SME: create Ogre material: " + materialName);
    Ogre::MaterialPtr material = materialManager->create(materialName, "General");

    // Remark: Sceneblending is done for each pass individually, although it is defined on material level

    // ---------------------------------------- Add the technique ----------------------------------------
    Magus::QtNode* node = mMaterialNode->getNodeConnectedToPort(PORT_TECHNIQUE_OUT);
    if (!node)
    {
        logManager->logMessage("SME: No technique node available");
        return;
    }

    Magus::QtNodeTechnique* techniqueNode = static_cast<Magus::QtNodeTechnique*>(node);
    material->removeAllTechniques();
    Ogre::Technique* technique = material->createTechnique();
    technique->removeAllPasses();
    logManager->logMessage("SME: Technique created" + Ogre::StringConverter::toString(material->getNumTechniques()));

    // ---------------------------------------- Add the passes ----------------------------------------
    Magus::QtNodePass* passNode;
    Magus::QtNodeTextureUnit* textureUnitNode;
    Ogre::Pass* pass;
    Ogre::TextureUnitState* textureUnit;
    for (unsigned int i = 1; i < 5; ++i)
    {
        node = techniqueNode->getNodeConnectedToPort(PORT_PASS_OUT, i); // node with the same name
        if (node)
        {
            passNode = static_cast<Magus::QtNodePass*>(node);
            pass = technique->createPass();
            pass->removeAllTextureUnitStates();
            logManager->logMessage("SME: Pass on port nr. " + Ogre::StringConverter::toString(i) + " created");
            propagatePassNodeData(passNode, pass);

            // ---------------------------------------- Add the texture units ----------------------------------------
            for (unsigned int j = 1; j < 9; ++j)
            {
                node = passNode->getNodeConnectedToPort(PORT_TEXTURE_OUT, j);
                if (node)
                {
                    logManager->logMessage("SME: Texture unit on port nr. " +
                                           Ogre::StringConverter::toString(j) +
                                           " of Pass port nr. " +
                                           Ogre::StringConverter::toString(i) +
                                           " created");
                    textureUnitNode = static_cast<Magus::QtNodeTextureUnit*>(node);
                    textureUnit = pass->createTextureUnitState();
                    propagateTextureUnitNodeData(textureUnitNode, textureUnit);
                }
            }
        }
    }

    // Assign the material to the ogrehead
    material->compile();
    material->load();
    mParent->getOgreManager()->getOgreWidget(1)->mEntity->setMaterial(material);
}

//****************************************************************************/
void EditorDockWidget::propagatePassNodeData(Magus::QtNodePass* passNode, Ogre::Pass* pass)
{
    // Set depth check
    pass->setDepthCheckEnabled(passNode->isDepthCheck());

    // Set depth write
    pass->setDepthWriteEnabled(passNode->isDepthWrite());

    // Set lighting
    pass->setLightingEnabled(passNode->isLighting());

    // Set ambient
    pass->setAmbient(passNode->getAmbient().red()/255.0f,
                     passNode->getAmbient().green()/255.0f,
                     passNode->getAmbient().blue()/255.0f);

    // Set diffuse
    pass->setDiffuse(passNode->getDiffuse().red()/255.0f,
                     passNode->getDiffuse().green()/255.0f,
                     passNode->getDiffuse().blue()/255.0f,
                     passNode->getDiffuse().alpha()/255.0f);

    // Set specular
    pass->setSpecular(passNode->getSpecular().red()/255.0f,
                      passNode->getSpecular().green()/255.0f,
                      passNode->getSpecular().blue()/255.0f,
                      passNode->getSpecular().alpha()/255.0f);

    // Set scene blending
    if (mMaterialNode->getSceneBlending() == QString("Transparent alpha"))
        pass->setSceneBlending(Ogre::SBT_TRANSPARENT_ALPHA);
    else if (mMaterialNode->getSceneBlending() == QString("Transparent color"))
        pass->setSceneBlending(Ogre::SBT_TRANSPARENT_COLOUR);
    else if (mMaterialNode->getSceneBlending() == QString("Add"))
        pass->setSceneBlending(Ogre::SBT_ADD);
    else if (mMaterialNode->getSceneBlending() == QString("Modulate"))
        pass->setSceneBlending(Ogre::SBT_MODULATE);
    else if (mMaterialNode->getSceneBlending() == QString("Replace"))
        pass->setSceneBlending(Ogre::SBT_REPLACE);
}

//****************************************************************************/
void EditorDockWidget::propagateTextureUnitNodeData(Magus::QtNodeTextureUnit* textureUnitNode, Ogre::TextureUnitState* textureUnit)
{
    Ogre::String qualifiedName = textureUnitNode->getTextureFileName().toStdString();
    Ogre::String outBasename;
    Ogre::String outExtention;
    Ogre::String outPath;
    Ogre::StringUtil::splitFullFilename(qualifiedName, outBasename, outExtention, outPath);
    Ogre::ResourceGroupManager::getSingleton().addResourceLocation(outPath, "FileSystem");
    Ogre::ResourceGroupManager::getSingleton().initialiseAllResourceGroups();
    textureUnit->setTextureName(textureUnitNode->getTextureBaseFileName().toStdString());
}

//****************************************************************************/
void EditorDockWidget::nodeDeleted(void)
{
    // There may be only 1 material node
    if (mMaterialNode == mNodeEditor->getRemovedNode())
        mMaterialNode = 0;
}

//****************************************************************************/
void EditorDockWidget::nodeSelected(Magus::QtNode* node)
{
    if (!node)
        return;

    if (node->getTitle() == NODE_TITLE_MATERIAL)
    {
        Magus::QtAssetMaterial* assetMaterial = mParent->mAssetDockWidget->mAssetMaterial;
        assetMaterial->setObject(static_cast<Magus::QtNodeMaterial*>(node));
        mParent->mAssetDockWidget->setAssetMaterialVisible(true);
    }
    else if (node->getTitle() == NODE_TITLE_TECHNIQUE)
    {
        Magus::QtAssetTechnique* assetTechnique = mParent->mAssetDockWidget->mAssetTechnique;
        assetTechnique->setObject(static_cast<Magus::QtNodeTechnique*>(node));
        mParent->mAssetDockWidget->setAssetTechniqueVisible(true);
    }
    else if (node->getTitle() == NODE_TITLE_PASS)
    {
        Magus::QtAssetPass* assetPass = mParent->mAssetDockWidget->mAssetPass;
        assetPass->setObject(static_cast<Magus::QtNodePass*>(node));
        mParent->mAssetDockWidget->setAssetPassVisible(true);
    }
    else if (node->getTitle() == NODE_TITLE_TEXTURE_UNIT)
    {
        Magus::QtAssetTextureUnit* assetTextureUnit = mParent->mAssetDockWidget->mAssetTextureUnit;
        assetTextureUnit->setObject(static_cast<Magus::QtNodeTextureUnit*>(node));
        mParent->mAssetDockWidget->setAssetTextureUnitVisible(true);
    }
}

//****************************************************************************/
void EditorDockWidget::start(void)
{
    mNodeEditor->clear();
    mMaterialNode = 0;
}
