/****************************************************************************
**
** Copyright (C) 2014
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include "constants.h"
#include "asset_containerwidget.h"
#include "asset_propertywidget_checkbox.h"
#include "asset_propertywidget_color.h"
#include "sme_asset_pass.h"
#include "sme_node_pass.h"

namespace Magus
{
    //****************************************************************************/
    QtAssetPass::QtAssetPass(const QString& fileNameIcon, QWidget* parent) : QWidget(parent)
    {
        mPassNode = 0;
        QVBoxLayout* mainLayout = new QVBoxLayout;
        mainLayout->setContentsMargins(0, 0, 0, 0);
        mAssetWidget = new QtAssetWidget(QString("Pass"), fileNameIcon, this);
        mAssetWidget->setFileNameIconCollapsed(ASSET_ICON_COLLAPSE);
        mAssetWidget->setFileNameIconExpanded(ASSET_ICON_EXPAND);
        mAssetWidget->setHeaderTitleBold();
        connect(mAssetWidget, SIGNAL(valueChanged(QtProperty*)), this, SLOT(propertyValueChanged(QtProperty*)));

        // Create container - General
        QtContainerWidget* container = 0;
        container = mAssetWidget->createContainer(ASSET_CONTAINER_PASS_GENERAL, QString("General"));
        container->setTitleIcon(ASSET_ICON_CUBE_BOLD);
        container->setTitleBold();
        mAssetWidget->createProperty(ASSET_CONTAINER_PASS_GENERAL,
                                    ASSET_PROPERTY_PASS_DEPTH_CHECK,
                                    QString("Depth check"),
                                    QtProperty::CHECKBOX);
        mAssetWidget->createProperty(ASSET_CONTAINER_PASS_GENERAL,
                                    ASSET_PROPERTY_PASS_DEPTH_WRITE,
                                    QString("Depth write"),
                                    QtProperty::CHECKBOX);
        mAssetWidget->createProperty(ASSET_CONTAINER_PASS_GENERAL,
                                    ASSET_PROPERTY_PASS_LIGHTING,
                                    QString("Lighting"),
                                    QtProperty::CHECKBOX);

        // Create container - Color
        container = mAssetWidget->createContainer(ASSET_CONTAINER_PASS_COLOR, QString("Color"));
        container->setTitleIcon(ASSET_ICON_CUBE_BOLD);
        container->setTitleBold();
        mAssetWidget->createProperty(ASSET_CONTAINER_PASS_COLOR,
                                    ASSET_PROPERTY_PASS_AMBIENT,
                                    QString("Ambient"),
                                    QtProperty::COLOR);
        mAssetWidget->createProperty(ASSET_CONTAINER_PASS_COLOR,
                                    ASSET_PROPERTY_PASS_DIFFUSE,
                                    QString("Diffuse"),
                                    QtProperty::COLOR);
        mAssetWidget->createProperty(ASSET_CONTAINER_PASS_COLOR,
                                    ASSET_PROPERTY_PASS_SPECULAR,
                                    QString("Specular"),
                                    QtProperty::COLOR);

        mainLayout->addWidget(mAssetWidget);
        setLayout(mainLayout);
        mAssetWidget->expandAllContainers();
    }

    //****************************************************************************/
    QtAssetPass::~QtAssetPass(void)
    {
    }

    //****************************************************************************/
    void QtAssetPass::setObject (QtNodePass* passNode)
    {
        if (!passNode)
            return;

        mPassNode = passNode;

        QtCheckBoxProperty* checkBoxProperty;
        QtColorProperty* colorProperty;

        // Depth check
        checkBoxProperty = static_cast<QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(ASSET_PROPERTY_PASS_DEPTH_CHECK));
        checkBoxProperty->setValue(passNode->isDepthCheck());

        // Depth write
        checkBoxProperty = static_cast<QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(ASSET_PROPERTY_PASS_DEPTH_WRITE));
        checkBoxProperty->setValue(passNode->isDepthWrite());

        // Lighting
        checkBoxProperty = static_cast<QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(ASSET_PROPERTY_PASS_LIGHTING));
        checkBoxProperty->setValue(passNode->isLighting());

        // Ambient
        colorProperty = static_cast<QtColorProperty*>(mAssetWidget->getPropertyWidget(ASSET_PROPERTY_PASS_AMBIENT));
        QColor ambient(passNode->getAmbient());
        colorProperty->setColor(ambient.red(), ambient.green(), ambient.blue(), ambient.alpha());

        // Diffuse
        colorProperty = static_cast<QtColorProperty*>(mAssetWidget->getPropertyWidget(ASSET_PROPERTY_PASS_DIFFUSE));
        QColor diffuse(passNode->getDiffuse());
        colorProperty->setColor(diffuse.red(), diffuse.green(), diffuse.blue(), diffuse.alpha());

        // Specular
        colorProperty = static_cast<QtColorProperty*>(mAssetWidget->getPropertyWidget(ASSET_PROPERTY_PASS_SPECULAR));
        QColor specular(passNode->getSpecular());
        colorProperty->setColor(specular.red(), specular.green(), specular.blue(), specular.alpha());
    }

    //****************************************************************************/
    void QtAssetPass::propertyValueChanged(QtProperty* property)
    {
        if (!mPassNode || !property)
            return;

        QtCheckBoxProperty* checkBoxProperty;
        QtColorProperty* colorProperty;
        switch (property->mPropertyId)
        {
            case ASSET_PROPERTY_PASS_DEPTH_CHECK:
            {
                checkBoxProperty = static_cast<QtCheckBoxProperty*>(property);
                mPassNode->setDepthCheck(checkBoxProperty->getValue());
            }
            break;

            case ASSET_PROPERTY_PASS_DEPTH_WRITE:
            {
                checkBoxProperty = static_cast<QtCheckBoxProperty*>(property);
                mPassNode->setDepthWrite(checkBoxProperty->getValue());
            }
            break;

            case ASSET_PROPERTY_PASS_LIGHTING:
            {
                checkBoxProperty = static_cast<QtCheckBoxProperty*>(property);
                mPassNode->setLighting(checkBoxProperty->getValue());
            }
            break;

            case ASSET_PROPERTY_PASS_AMBIENT:
            {
                colorProperty = static_cast<QtColorProperty*>(property);
                QColor ambient(colorProperty->getRed(),
                               colorProperty->getGreen(),
                               colorProperty->getBlue(),
                               colorProperty->getAlpha());
                mPassNode->setAmbient(ambient);
            }
            break;

            case ASSET_PROPERTY_PASS_DIFFUSE:
            {
                colorProperty = static_cast<QtColorProperty*>(property);
                QColor diffuse(colorProperty->getRed(),
                               colorProperty->getGreen(),
                               colorProperty->getBlue(),
                               colorProperty->getAlpha());
                mPassNode->setDiffuse(diffuse);
            }
            break;

            case ASSET_PROPERTY_PASS_SPECULAR:
            {
                colorProperty = static_cast<QtColorProperty*>(property);
                QColor specular(colorProperty->getRed(),
                               colorProperty->getGreen(),
                               colorProperty->getBlue(),
                               colorProperty->getAlpha());
                mPassNode->setSpecular(specular);
            }
            break;
        }
    }

}
