/****************************************************************************
**
** Copyright (C) 2014
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QMessageBox>
#include "constants.h"
#include "asset_containerwidget.h"
#include "sme_asset_texture_unit.h"
#include "sme_node_texture_unit.h"
#include "asset_propertywidget_texture.h"

namespace Magus
{
    //****************************************************************************/
    QtAssetTextureUnit::QtAssetTextureUnit(const QString& fileNameIcon, QWidget* parent) : QWidget(parent)
    {
        mTextureUnitNode = 0;
        QVBoxLayout* mainLayout = new QVBoxLayout;
        mainLayout->setContentsMargins(0, 0, 0, 0);
        mAssetWidget = new QtAssetWidget(QString("Texture unit"), fileNameIcon, this);
        mAssetWidget->setFileNameIconCollapsed(ASSET_ICON_COLLAPSE);
        mAssetWidget->setFileNameIconExpanded(ASSET_ICON_EXPAND);
        mAssetWidget->setHeaderTitleBold();
        connect(mAssetWidget, SIGNAL(valueChanged(QtProperty*)), this, SLOT(propertyValueChanged(QtProperty*)));

        // Create container - General
        QtContainerWidget* container = 0;
        container = mAssetWidget->createContainer(ASSET_CONTAINER_TEXTURE_UNIT_GENERAL, QString("General"));
        container->setTitleIcon(ASSET_ICON_CUBE_BOLD);
        container->setTitleBold();
        mAssetWidget->createProperty(ASSET_CONTAINER_TEXTURE_UNIT_GENERAL,
                                    ASSET_PROPERTY_TEXTURE_UNIT_TEXTURE,
                                    QString("Texture"),
                                    QtProperty::TEXTURE);

        mainLayout->addWidget(mAssetWidget);
        setLayout(mainLayout);
        mAssetWidget->expandAllContainers();
    }

    //****************************************************************************/
    QtAssetTextureUnit::~QtAssetTextureUnit(void)
    {
    }

    //****************************************************************************/
    void QtAssetTextureUnit::setObject (QtNodeTextureUnit* textureUnitNode)
    {
        if (!textureUnitNode)
            return;

        mTextureUnitNode = textureUnitNode;
        QtTextureProperty* textureProperty;

        // Texture
        textureProperty = static_cast<QtTextureProperty*>(mAssetWidget->getPropertyWidget(ASSET_PROPERTY_TEXTURE_UNIT_TEXTURE));
        textureProperty->setTextureFileName(textureUnitNode->getTextureFileName());
    }

    //****************************************************************************/
    void QtAssetTextureUnit::propertyValueChanged(QtProperty* property)
    {
        if (!mTextureUnitNode || !property)
            return;

        QtTextureProperty* textureProperty;
        switch (property->mPropertyId)
        {
            case ASSET_PROPERTY_TEXTURE_UNIT_TEXTURE:
            {
                textureProperty = static_cast<QtTextureProperty*>(property);
                QString text = textureProperty->getTextureFileName();
                mTextureUnitNode->setTextureFileName(text);
                text = textureProperty->getTextureBaseFileName();
                mTextureUnitNode->setTextureBaseFileName(text);
            }
            break;
        }
    }
}
