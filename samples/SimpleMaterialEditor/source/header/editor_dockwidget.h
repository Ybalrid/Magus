/****************************************************************************
**
** Copyright (C) 2014
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef EditorDOCWIDGET_H
#define EditorDOCWIDGET_H

#include <QtWidgets>
#include "constants.h"
#include <QMenu>
#include <QAction>
#include <QToolBar>
#include <QTabWidget>
#include "node_editorwidget.h"
#include "sme_node_material.h"
#include "node_node.h"
#include "sme_node_pass.h"
#include "sme_node_texture_unit.h"
#include "Ogre.h"

QT_BEGIN_NAMESPACE
class QDockWidget;
QT_END_NAMESPACE

class MainWindow;

/****************************************************************************
 This class represents a DockWidget
 ***************************************************************************/
using namespace Magus; // Use 'namespace Magus' because of issues with signal and slots;
                       // void nodeSelected(Magus::QtNode* node); does not work!
class EditorDockWidget : public QDockWidget
{
    Q_OBJECT

	public:
		EditorDockWidget(QString title, MainWindow* parent, Qt::WindowFlags flags = 0);
		~EditorDockWidget(void);
		void createActions(void);
		void createMenus(void);
		void createToolBars(void);
        void start(void);

    private slots:
        void doMaterialHToolbarAction(void);
        void doTechniqueHToolbarAction(void);
        void doPassHToolbarAction(void);
        void doTextureHToolbarAction(void);
        void doCogHToolbarAction(void);
        void nodeDeleted(void);
        void nodeSelected(QtNode* node);

    protected:
        void propagatePassNodeData(Magus::QtNodePass* passNode, Ogre::Pass* pass);
        void propagateTextureUnitNodeData(Magus::QtNodeTextureUnit* textureUnitNode, Ogre::TextureUnitState* textureUnit);

	private:
		MainWindow* mParent;
        QMainWindow* mInnerMain;
        QAction* mMaterialHToolbarAction;
        QAction* mTechniqueHToolbarAction;
        QAction* mPassHToolbarAction;
        QAction* mTextureHToolbarAction;
        QAction* mCogHToolbarAction;
        QToolBar* mHToolBar; 
        Magus::QtNodeEditor* mNodeEditor;
        Magus::QtNodeMaterial* mMaterialNode;

};

#endif

