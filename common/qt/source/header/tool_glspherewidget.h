/****************************************************************************
**
** Copyright (C) 2015
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef GL_SPHERE_WIDGET_H
#define GL_SPHERE_WIDGET_H

#include <QtWidgets>
#include <QGLWidget>
#include <QPixmap>
#include <QOpenGLFunctions>

QT_FORWARD_DECLARE_CLASS(QGLShaderProgram);

namespace Magus
{
    static const float TOOL_SPHERE_PI = 3.14159265358979f;
    static const float TOOL_SPHERE_TWOPI = 6.28318530717958f;
    static const float TOOL_SPHERE_PIDIV2 = 1.57079632679489f;
    static const float TOOL_SPHERE_RADIUS = 0.45f;
    static const int TOOL_SPHERE_PRECISION = 32;
    static const int TOOL_SPHERE_PRECISIONDIV2 = 16;
    static const int TOOL_SPHERE_VERTS = 1056;

    class QtGLSphereWidget : public QGLWidget, protected QOpenGLFunctions
    {
        Q_OBJECT

    public:
        explicit QtGLSphereWidget(QWidget *parent = 0, QGLWidget *shareWidget = 0);
        ~QtGLSphereWidget();

        QSize minimumSizeHint() const;
        QSize sizeHint() const;
        void rotateBy(int xAngle, int yAngle, int zAngle);
        void setClearColor(const QColor &color);
        void setPixmap(const QPixmap& pixmap, const QString& fullName, const QString& baseName);
        const QString& getFullName(void) const;
        const QString& getBaseName(void) const;

    signals:
        void clicked();
        void selected(const QString& fullName, const QString& baseName);
        void doubleClicked(const QString& fullName, const QString& baseName);

    protected:
        void initializeGL();
        void paintGL();
        void resizeGL(int width, int height);
        void mousePressEvent(QMouseEvent *event);
        void mouseMoveEvent(QMouseEvent *event);
        void mouseReleaseEvent(QMouseEvent *event);
        void mouseDoubleClickEvent(QMouseEvent *event);

    private:
        void buildSphere(void);

        QPixmap mPixmap;
        QString mFullName;
        QString mBaseName;
        QColor clearColor;
        QPoint lastPos;
        int xRot;
        int yRot;
        int zRot;
        GLuint texture;
        QVector<QVector3D> vertices;
        QVector<QVector3D> normals; // They are not used in the shader but still calculated for future use
        QVector<QVector2D> texCoords;
        QGLShaderProgram *program;
    };
}
#endif
