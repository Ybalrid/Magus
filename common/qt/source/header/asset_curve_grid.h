/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef MAGUS_ASSET_CURVE_GRID_H
#define MAGUS_ASSET_CURVE_GRID_H

#include <QtWidgets>
#include <QVector>
#include <QPoint>
#include <QBrush>
#include <QGraphicsScene>
#include <QGraphicsPathItem>
#include <QGraphicsTextItem>
#include <QGraphicsEllipseItem>

QT_BEGIN_NAMESPACE
QT_END_NAMESPACE

namespace Magus
{
    /****************************************************************************
    This class represents a derived class of QGraphicsEllipseItem
    ***************************************************************************/
    class QtCurveEllipseItem : public QGraphicsEllipseItem
    {
        public:
            QtCurveEllipseItem(qreal x, qreal y, qreal w, qreal h);
            virtual ~QtCurveEllipseItem(void);
            void setSelected (bool selected);
            void setMouseOver (bool mouseOver, qreal x = 0.0f, qreal y = 0.0f, int decimalX = 0, int decimalY = 0);
            bool isSelected (void);
            bool isMouseOver (void);

        protected:
            virtual void hoverEnterEvent(QGraphicsSceneHoverEvent* event);
            virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent* event);
            virtual void mousePressEvent(QGraphicsSceneMouseEvent* event);

        private:
            bool mSelected;
            bool mMouseOver;
            QPen mPenUnselected;
            QPen mPenSelected;
            QBrush mBrushUnselected;
            QBrush mBrushSelected;
    };

    /****************************************************************************
    This class represents a derived class of QGraphicsScene
    ***************************************************************************/
    class QtCurveGrid : public QGraphicsScene
    {
        Q_OBJECT

        public:
            enum Mode {EDIT, SELECT, MOVE};
            enum DrawType {STRAIGHTLINE_UNSORTED = 1 << 0,
                           STRAIGHTLINE_SORTED = 1 << 1,
                           CUBIC_UNSORTED = 1 << 2,
                           CUBIC_SORTED = 1 << 3};
            QtCurveGrid(QObject *parent = 0);
            ~QtCurveGrid(void);
            QVector <QPointF>& getPoints(void);
            void refresh(void);
            void setParentView (QGraphicsView* parentView);
            void wheelEvent (QWheelEvent* event);
            void fitHorizontal(void);
            void fitVertical(void);
            void setStep(int step);
            void setXmin(qreal xMin);
            qreal getXmin(void);
            void setXstep(qreal xStep);
            qreal getXstep(void);
            void setDecimalX(int decimals);
            int getDecimalX(void);
            void setYmin(qreal yMin);
            qreal getYmin(void);
            void setYstep(qreal yStep);
            qreal getYstep(void);
            void setDecimalY(int decimals);
            int getDecimalY(void);
            void addPoint(qreal x, qreal y);
            void zoomIn(void);
            void zoomOut(void);
            void setMode(Mode mode);
            void setDrawType(DrawType drawType);
            void deletePoints(void);
            void deleteTextItems(void);
            static const int POINT_SIZE = 16;
            static const int POINT_HALF_SIZE = 8;
            static const int KEY_X = 1;
            static const int KEY_Y = 2;

        protected:
            inline qreal round(qreal val, int step);
            void drawBackground(QPainter *painter, const QRectF &rect);
            void clearTextFromTextItems(void);
            void checkMouseOver(qreal x, qreal y);
            void drawPoints(void);
            void drawLine(void);
            void drawStraightLineUnsorted(void);
            void drawStraightLineSorted(void);
            void drawCubicUnsortedLine(void);
            void drawCubicSortedLine(void);
            void removeLineItem (int drawTypes);
            void deselectAllPoints(void);
            qreal fromXValueToPointX (qreal valX);
            qreal fromYValueToPointY (qreal valY);
            qreal fromPointXToXValue (qreal pointX);
            qreal fromPointYToYValue (qreal pointY);
            bool atLeastOnePointSelected (void);
            virtual void mousePressEvent(QGraphicsSceneMouseEvent* event);
            virtual void mouseMoveEvent(QGraphicsSceneMouseEvent* event);
            virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent* event);

        private:
            Mode mMode;
            DrawType mDrawType;
            QGraphicsItemGroup* mPointGroup;
            QGraphicsPathItem* mDrawStraightLineUnsortedPath;
            QGraphicsPathItem* mDrawStraightLineSortedPath;
            QGraphicsPathItem* mDrawCubicUnsortedLinePath;
            QGraphicsPathItem* mDrawCubicSortedLinePath;
            bool mRepaintStraightLineUnsorted;
            bool mRepaintStraightLineSorted;
            bool mRepaintCubicUnsortedLine;
            bool mRepaintCubicSortedLine;
            QGraphicsView* mParentView;
            int mStep;
            int mZoomStep;
            qreal mMinX;
            qreal mStepX;
            qreal mMinY;
            qreal mStepY;
            int mDecimalX;
            int mDecimalY;
            qreal mStartX;
            qreal mStartY;
            QVector <QGraphicsTextItem*> mTextItemList;
            QVector <QtCurveEllipseItem*> mPointList;
            QVector <QPointF> mPoints;
            QPoint mLastMousePosition;
            QGraphicsRectItem* mRubberBand;
    };
}

#endif
