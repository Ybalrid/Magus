/****************************************************************************
**
** Copyright (C) 2014
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef MAGUS_ASSET_WIDGET_H
#define MAGUS_ASSET_WIDGET_H

#include <QWidget>
#include <QFrame>
#include <QLabel>
#include <QSize>
#include <QMap>
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QMenu>
#include "asset_assetconstants.h"
#include "asset_clickablelabel.h"
#include "asset_containerwidget.h"

QT_BEGIN_NAMESPACE

QT_END_NAMESPACE

namespace Magus
{
    /****************************************************************************
    Main widget containing property widgets (grouped into containers).
    The QtAssetWidget consist of a header and a 'body'. The header
    contains:
    - A title (mandatory in constructor).
    - An icon to illustrate the title (mandatory in constructor, but can be empty).
    - A clickable icon (action 1) that can be used for for a certain action,
    e.g. a property window (optional).
    - A clickable icon (action 2) that can be used for a certain action

    The body contains 0..n container widgets (for properties). Property widgets
    cannot be added directly to the QtAssetWidget. Properties are always stored
    in containers (QtContainerWidget).
    ***************************************************************************/
    class QtAssetWidget : public QWidget
    {
        Q_OBJECT

        public:
            QtAssetWidget(const QString& title, const QString& fileNameIcon, QWidget* parent = 0);
            virtual ~QtAssetWidget(void);

            // ------------------------
            // --- Header functions ---
            // ------------------------

            // Set the title in the widgets' header
            void setHeaderTitle(const QString& titleName);

            // Set the icon, associated with the title in the widgets' header
            void setHeaderTitleIcon(const QString& fileNameIcon);

            // Function to set the title in bold or normal style
            void setHeaderTitleBold(bool bold = true);

            // Set the size of the icon, associated with the title
            void setHeaderTitleIconSize(const QSize& size);

            // Set the icon for action 1. Note, that the action involved with this icon can be anything; it
            // doesn't need to refer to a specific action. Leftclicking this icon emits the
            // headerAction1Clicked signal.
            void setHeaderAction1Icon(const QString& fileNameIcon);

            // Set the size of the action 1 icon
            void setHeaderAction1IconSize(const QSize& size);

            // Icon similar to the action icon 1. The action involved with this icon can be anything.
            // Leftclicking this icon emits the headerAction2Clicked signal.
            void setHeaderAction2Icon(const QString& fileNameIcon);

            // Set the size of the action icon 2.
            void setHeaderAction2IconSize(const QSize& size);

            // Enable a context menu on the QtAssetWidget, which is opened when right-clicking on the widget.
            void useContextMenu(bool use);

            // Add contextmenu action. If an item is selected, the contextItemSelected signal is emitted
            void addContextMenuAction(const QString& actionText);

            // Enable or disable an item in the contextmenu
            void setContextMenuActionEnabled(const QString& actionText, bool enabled);

            // ------------------------
            // --- Container functions ---
            // ------------------------

            // Create a container (QtContainerWidget). The container is automatically added to the QtAssetWidget.
            // Each container is defined by means of a containerId. The containerId must be unique over all
            // containers in a QtAssetWidget. A containerId also refers to the order in which it is showed
            // in a QtQtAssetWidget.
            QtContainerWidget* createContainer (int containerId, QString title, bool line = true);

            // Create a property in a container. Creating a property can also be done in the container
            // directly, but this function makes it a bit easier to do it directly via the QtAssetWidget.
            // The type (QtProperty::PropertyType) determines which type of property is created.
            // immutable determines whether a property is read-only or not.
            // If a value of the property is changed, a valueChanged signal is emitted (2 signals in fact,
            // one withe the propertyId and one with the property (QtProperty) itself.
            QtProperty* createProperty (int containerId, int propertyId, QString title, QtProperty::PropertyType type, bool immutable = false);

            // Get pointer to QtContainerWidget, based on the containerId
            QtContainerWidget* getContainerWidget (int containerId);

            // Get pointer to property (QtProperty), based on the containerId and the propertyId. The combination
            // of containerId and propertyId must be unique within a QtAssetWidget.
            QtProperty* getPropertyWidget (int containerId, int propertyId);

            // Get the first pointer to a property, based on the propertyId. It is possible that QtAssetWidget
            // contains more containers with properties with the same propertyId. For convenience, it is adviced
            // to make a property unique within a QtAssetWidget, so you don't have to know the containerId in
            // which the property resides.
            QtProperty* getPropertyWidget (int propertyId);

            // Filename of the icon used for indicating that a container is collapsed.
            void setFileNameIconCollapsed(const QString& fileNameIcon);

            // Filename of the icon used for indicating that a container is expanded.
            void setFileNameIconExpanded(const QString& fileNameIcon);

            // Expand all containers
            void expandAllContainers(void);

            // Collapse all containers
            void collapseAllContainers(void);

            // convenience function to set the title of the container in bold or normal style
            void setContainerTitleBold(int containerId, bool bold = true);

            // TODO: deleteContainer (int containerId)
            // TODO: deleteProperty

        signals:
            // Emitted when the action 1 icon of the QtAssetWidget is clicked
            void headerAction1Clicked(void);

            // Emitted when the action 2 icon of the QtAssetWidget is clicked
            void headerAction2Clicked(void);

            // Emitted when the action 1 icon of a QtContainerWidget is clicked
            void containerAction1Clicked(int containerId);

            // Emitted when the action 1 icon of a QtContainerWidget is clicked
            void containerAction1Clicked(QtContainerWidget* containerWidget);

            // Emitted when the action 2 icon of a QtContainerWidget is clicked
            void containerAction2Clicked(int containerId);

            // Emitted when the action 2 icon of a QtContainerWidget is clicked
            void containerAction2Clicked(QtContainerWidget* containerWidget);

            // Emitted when an item in the contextmenu is selected
            void contextItemSelected(QAction* action);

            // Emitted when the value of a QtProperty is changed
            void valueChanged(int propertyId);

            // Emitted when the value of a QtProperty is changed
            void valueChanged(QtProperty* property);

            // TODO: containerAdded
            // TODO: containerDeleted

        private slots:
            void headerAction1IconClicked(void);
            void headerAction2IconClicked(void);
            void containerAction1IconClicked(QtContainerWidget* containerWidget);
            void containerAction2IconClicked(QtContainerWidget* containerWidget);
            void propertyValueChanged(QtProperty* property);
            void showContextMenu(const QPoint& pos);
            void itemSelected(QAction* action);

        private:
            static const int ASSET_HEADER_HEIGHT = 48;
            static const int DEFAULT_ICON_DIMENSION = 32;
            QMap<int, QtContainerWidget*> mQtContainerWidgetMap;
            QFrame* mHeader;
            QVBoxLayout* mMainLayout;

            // Title and icon
            QHBoxLayout* mHeaderLayout;
            QHBoxLayout* mHeaderLeftLayout;
            QHBoxLayout* mHeaderRightLayout;
            QLabel* mHeaderTitleLabel;
            QLabel* mHeaderTitleIconLabel;
            QString mHeaderTitleFileNameIcon;
            QSize mHeaderTitleIconSize;

            // Action 1 icon
            QtClickableLabel* mHeaderAction1IconLabel;
            QString mHeaderAction1FileNameIcon;
            QSize mHeaderAction1IconSize;

            // Action 2 icon
            QtClickableLabel* mHeaderAction2IconLabel;
            QString mHeaderAction2FileNameIcon;
            QSize mHeaderAction2IconSize;
            QMenu* mContextMenu;

            // Generic container attributes
            QString mFileNameIconCollapsed;
            QString mFileNameIconExpand;

            // Functions
            void rebuildWidgetContent(void);
    };
}

#endif
