/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef MAGUS_OGRE_ASSET_ENTITY_H
#define MAGUS_OGRE_ASSET_ENTITY_H

#include <QWidget>
#include "Ogre.h"
#include "asset_assetwidget.h"

QT_BEGIN_NAMESPACE

QT_END_NAMESPACE

namespace Magus
{
    /****************************************************************************
    Widget that represents the Ogre Camera properties
    ***************************************************************************/
    class QtOgreAssetEntity : public QWidget
    {
        Q_OBJECT

        public:
            QtOgreAssetEntity(const QString& iconDir, QWidget* parent = 0);
            virtual ~QtOgreAssetEntity(void);

            // Containers
            const static int CONTAINER_GENERAL = 0;
            const static int CONTAINER_TRANSFORM = 1;
            const static int CONTAINER_RENDERING = 2;
            const static int CONTAINER_SHADOWS = 3;
            const static int CONTAINER_ANIMATION = 4;
            const static int CONTAINER_SUBENTITIES = 5;

            // Entity general properties
            const static int ENTITY_NAME = 10;
            const static int ENTITY_MESH_NAME = 11;

            // Entity transform properties
            const static int ENTITY_POSITION_PROPERTY = 12;
            const static int ENTITY_ROTATION_PROPERTY = 13;
            const static int ENTITY_SCALE_PROPERTY = 14;

            // Entity rendering properties
            const static int ENTITY_RENDERING_DISTANCE = 15;
            const static int ENTITY_QUEUE_GROUP = 16;

            // Entity shadows properties
            const static int ENTITY_CAST_SHADOWS = 17;
            const static int ENTITY_RECEIVE_SHADOWS = 18;

            // Entity animation properties
            const static int ENTITY_HAS_SKELETON = 19;
            const static int ENTITY_HAS_VERTEX_ANIMATION = 20;
            const static int ENTITY_HARDWARE_ANIMATION = 21;

            // Subentity properties
            const static int SUBENTITY_MATERIAL_NAME = 1000;
            const static int SUBENTITY_MAX_MATERIAL_NAME = 1019;

            // Synchronize an Ogre Entity with the QtOgreEntity widget.
            void bindObject (Ogre::Entity* entity);

            // Some convenient functions
            void expandAll(void);
            void collapseAll(void);

        private slots:
            void containerAction2Clicked (QtContainerWidget* container);
            void propertyValueChanged(QtProperty* property);

        private:
            QtAssetWidget* mAssetWidget;
            QtContainerWidget* mSubEntityContainer;
            Ogre::Entity* mOgreEntity;
    };
}

#endif
