/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef MAGUS_OGRE_WIDGET_H
#define MAGUS_OGRE_WIDGET_H

#include <QWidget>
#include <QPaintEngine>
#include "OgreRoot.h"
#include "OgreRenderWindow.h"
#include "OgreString.h"
#include "OgreCamera.h"
#include "OgreColourValue.h"
#include "ogre3_cameraman.h"
#include "ogre_prereqs.h"

namespace Magus
{
    class OgreManager;

    /****************************************************************************
    QT Ogre Window for Ogre > V2.0
    ***************************************************************************/
    class QOgreWidget : public QWidget
    {
        Q_OBJECT

        public:
            QOgreWidget(QWidget* parent = 0);
            virtual ~QOgreWidget(void);
            QPaintEngine* paintEngine() const; // Turn off QTs paint engine for the Ogre widget.
            void updateOgre(float timeSinceLastFrame);
            void createRenderWindow(OgreManager* ogreManager);
            void createScene();

        protected:
            Ogre::Root* mRoot;
            Ogre::RenderWindow* mOgreRenderWindow;
            Ogre::SceneManager* mSceneManager;
            Ogre::Camera* mCamera;
            Ogre::ColourValue mBackground;
            Ogre::Real mTimeSinceLastFrame;
            CameraMan* mCameraManager;
            bool mSceneCreated;
            Ogre::Vector2 mAbsolute;
            Ogre::Vector2 mRelative;
            bool mSystemInitialized;

            virtual void createCompositor();
            virtual void paintEvent(QPaintEvent *e);
            virtual void resizeEvent(QResizeEvent *e);
            virtual void keyPressEvent(QKeyEvent * ev);
            virtual void keyReleaseEvent(QKeyEvent * ev);
            virtual void mouseMoveEvent(QMouseEvent* e);
            //virtual void mouseWheelEvent(QWheelEvent* e);
            virtual void wheelEvent(QWheelEvent* e);
            virtual void mousePressEvent(QMouseEvent* e);
            virtual void mouseReleaseEvent(QMouseEvent* e);
            HGLRC getCurrentGlContext(void);
    };
}

//****************************************************************************/
#endif // MAGUS_OGRE_WIDGET_H
