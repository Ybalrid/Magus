/****************************************************************************
**
** Copyright (C) 2015
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef MAGUS_TOOL_AUDIO_WIDGET_H
#define MAGUS_TOOL_AUDIO_WIDGET_H

#include <QWidget>
#include <QListWidget>
#include <QLineEdit>
#include <QLabel>
#include <QMenu>
#include <QAction>
#include <QPixmap>
#include <QtMultimedia/QMediaPlayer>
#include "magus_core.h"

QT_BEGIN_NAMESPACE

QT_END_NAMESPACE

/*
 * TODO:
 * - Display only the items based on a filter
 /

namespace Magus
{
    static const QString TOOL_AUDIOWIDGET_ICON_PLAY = QString("audio_play.png");
    static const QString TOOL_AUDIOWIDGET_ICON_PAUSE = QString("audio_pause.png");
    static const QString TOOL_AUDIOWIDGET_ICON_STOP = QString("audio_stop.png");
    static const QString TOOL_AUDIOWIDGET_ACTION_PLAY = QString("Play sound");
    static const QString TOOL_AUDIOWIDGET_ACTION_PAUSE = QString("Pause sound");
    static const QString TOOL_AUDIOWIDGET_ACTION_STOP = QString("Stop sound");

    /****************************************************************************
    Helper class to combine the audio images and name of the audio source
    ***************************************************************************/
    class QtAudioAndText : public QWidget
    {
        Q_OBJECT

        public:
            QString mBaseName;
            QString mName;
            Source mSource;
            QtAudioAndText(const QString& iconDir,
                           Source source,
                           const QString& name,
                           const QString& baseName,
                           const QSize& size,
                           QWidget* parent = 0);
            virtual ~QtAudioAndText(void);

            // Set the correct image status
            void setPlay(void);
            void setPause(void);
            void setStop(void);

        private:
            QLabel* mTextureLabel;
            QLineEdit* mBaseNameEdit;
            QPixmap mPixmapAudioPause;
            QPixmap mPixmapAudioPlay;
            QPixmap mPixmapAudioStop;
    };

    //****************************************************************************/
    //****************************************************************************/
    /****************************************************************************
    Main class for audio selection widget
    ***************************************************************************/
    class QtAudioWidget : public QWidget
    {
        Q_OBJECT

        public:
            QtAudioWidget(const QString& iconDir, QWidget* parent = 0);
            virtual ~QtAudioWidget(void);
            bool eventFilter(QObject* object, QEvent* event);

            // Add an audio item to the QtAudioWidget. This item becomes clickable, wich results in playing or pausing the audio.
            // The source indicates whether the audio - represented by name - is a file or another type of source. Currently, only
            // a file type (SOURCE_FILE) is available.
            // The name is a (fully qualified) filename for example.
            // E.g. name = "c:/temp/Tools/common/icons/info.png"
            // E.g. baseName = "info.png"
            void addAudio(Source source, const QString& name, const QString& baseName);

            // Delete an item from the QtAudioWidget. Use the full qualified name as search criterium.
            void deleteAudio(const QString& name);

            // Clear the content of the widget
            void clearContent(void);

            // Return the name of the selected texture
            // E.g. "c:/temp/Tools/common/icons/info.png"
            const QString& getNameTexture(void);

            // Return the base name of the selected texture
            // E.g. "info.png" in case the name of the texture is a full qualified filename.
            const QString& getBaseNameTexture(void);

            // Define the width and height of a texture in the selection box
            void setTextureSize (QSize size);

        signals:
            // Emitted when a texture is selected (via the mouse)
            void selected(const QString& name, const QString& baseName);

            // Emitted when a texture is doubleclicked (via the mouse)
            void doubleClicked(const QString& name, const QString& baseName);

        protected slots:
            void handleSelected(QListWidgetItem* item);
            void handleDoubleClicked(QListWidgetItem* item);
            void contextMenuItemSelected(QAction* action);
            void handlePositionChanged(qint64);

        protected:
            void mouseClickHandler(QMouseEvent* event);
            void buildContextMenu(void);
            void playAudio(Source source, QString name, QtAudioAndText* textureAndText = 0);
            void pauseAudio(QtAudioAndText* textureAndText = 0);
            void stopAudio(QtAudioAndText* textureAndText = 0);

        private:
            QString mCurrentAudioPlaying;
            QtAudioAndText* mLastSelectedTextureAndText;
            QMediaPlayer* mAudioPlayer;
            QMenu* mContextMenu;
            QString mIconDir;
            QListWidget* mSelectionList;
            QSize mTextureSize;
            QString mNameTexture; // In case of a filename, this is the fully qualified filename (path + filename)
            QString mBaseNameTexture; // If mNameTexture is a filename, this is the basename.
    };
}

#endif
