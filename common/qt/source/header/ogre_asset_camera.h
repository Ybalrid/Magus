/****************************************************************************
**
** Copyright (C) 2014
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef MAGUS_OGRE_ASSET_CAMERA_H
#define MAGUS_OGRE_ASSET_CAMERA_H

#include <QWidget>
#include "Ogre.h"
#include "asset_assetwidget.h"

QT_BEGIN_NAMESPACE

QT_END_NAMESPACE

namespace Magus
{
    /****************************************************************************
    Widget that represents the Ogre Camera properties
    ***************************************************************************/
    class QtOgreAssetCamera : public QWidget
    {
        Q_OBJECT

        public:
            QtOgreAssetCamera(const QString& iconDir, QWidget* parent = 0);
            virtual ~QtOgreAssetCamera(void);

            // Containers
            const static int CONTAINER_GENERAL = 0;
            const static int CONTAINER_TRANSFORM = 1;

            // Properties
            const static int CAMERA_POSITION_PROPERTY = 0;
            const static int CAMERA_ROTATION_PROPERTY = 1;
            const static int CAMERA_NAME_PROPERTY = 10;
            const static int CAMERA_DIRECTION_PROPERTY = 11;
            const static int CAMERA_PROJECTION_PROPERTY = 12;
            const static int CAMERA_FOV_PROPERTY = 13;
            const static int CAMERA_NEAR_CLIP_DISTANCE_PROPERTY = 14;
            const static int CAMERA_FAR_CLIP_DISTANCE_PROPERTY = 15;

            // Synchronize an Ogre Camera with the QtOgreAssetCamera widget.
            // The bindObject function updates the properties based on the camera. This is done once
            // (when the bindObject is called). After that, the QtOgreAssetCamera is not updated when the
            // Camera settings change (a new bindObject call is needed for that).
            // The other way around: Each propertychange in the QtOgreAssetCamera updates the Ogre Camera.
            void bindObject (Ogre::Camera* camera);

            // Some convenient functions
            void expandAll(void);
            void collapseAll(void);

        private slots:
            void containerAction2Clicked (QtContainerWidget* container);
            void propertyValueChanged(QtProperty* property);

        private:
            QtAssetWidget* mAssetWidget;
            Ogre::Camera* mOgreCamera;
    };
}

#endif
