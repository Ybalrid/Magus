/****************************************************************************
**
** Copyright (C) 2014
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef MAGUS_OGRE_ASSET_MATERIAL_H
#define MAGUS_OGRE_ASSET_MATERIAL_H

#include <QWidget>
#include "Ogre.h"
#include "asset_assetwidget.h"

QT_BEGIN_NAMESPACE

QT_END_NAMESPACE

namespace Magus
{
    /****************************************************************************
    Widget that represents the Ogre Material properties
    ***************************************************************************/
    class QtOgreAssetMaterial : public QWidget
    {
        Q_OBJECT

        public:
            QtOgreAssetMaterial(const QString& iconDir, QWidget* parent = 0);
            virtual ~QtOgreAssetMaterial(void);

            // Containers
            const static int CONTAINER_GENERAL = 0;
            const static int TECHNIQUE_BASE = 100;
            const static int PASS_BASE = 200;
            const static int TUS_BASE = 300;

            // Material properties
            const static int MATERIAL_NAME = 0;
            const static int MATERIAL_SCENE_BLENDING = 1;

            // Pass properties
            const static int PASS_AMBIENT = 30;
            const static int PASS_DIFFUSE = 31;
            const static int PASS_SPECULAR = 32;
            const static int PASS_EMISSIVE = 33;
            const static int PASS_SELF_ILLUMINATION = 34;
            const static int PASS_DEPTH_CHECK = 35;
            const static int PASS_DEPTH_WRITE = 36;
            const static int PASS_LIGHTING = 37;
            const static int PASS_ALPHA_TO_COVERAGE = 38;
            const static int PASS_FRAGMENT_NAME = 39;
            const static int PASS_VERTEX_NAME = 40;
            const static int PASS_GEOMETRY_NAME = 41;
            const static int PASS_SHININESS = 42;

            // Texture unit state properties
            const static int TUS_TEXTURE_NAME = 50;
            const static int TUS_FILTERING = 51;
            const static int TUS_MIPMAPS = 52;
            const static int TUS_USCALE = 53;
            const static int TUS_VSCALE = 54;
            const static int TUS_USCROLL = 55;
            const static int TUS_VSCROLL = 56;

            // Synchronize an Ogre Material with the QtOgreAssetMaterial widget.
            // The bindObject function updates the properties based on the material. This is done once
            // (when the bindObject is called). After that, the QtOgreAssetMaterial is not updated when the
            // Material settings change (a new bindObject call is needed for that).
            // The other way around: Each propertychange in the QtOgreAssetMaterial updates the Ogre Material.
            void bindObject (Ogre::Material* material);

            // Some convenient functions
            void expandAll(void);
            void collapseAll(void);

        private slots:
            void propertyValueChanged(QtProperty* property);

        private:
            QtAssetWidget* mAssetWidget;
            Ogre::Material* mOgreMaterial;
            QString mIconDir;
    };
}

#endif
