/****************************************************************************
**
** Copyright (C) 2014
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QMessageBox>
#include <QHeaderView>
#include <QEvent>
#include <QPixmap>
#include <QImage>
#include <QTreeWidgetItem>
#include "tool_sceneviewwidget.h"

namespace Magus
{
    //****************************************************************************/
    QtSceneViewWidget::QtSceneViewWidget(const QString iconDir, QWidget* parent) : QWidget(parent)
    {
        setWindowTitle(QString("Scene view"));
        mIconDir = iconDir;
        QHBoxLayout* mainLayout = new QHBoxLayout;
        mTreeLayout = new QVBoxLayout;

        // Layout
        mainLayout->addLayout(mTreeLayout);
        setLayout(mainLayout);
    }

    //****************************************************************************/
    QtSceneViewWidget::~QtSceneViewWidget(void)
    {
        // Delete all QtAssetGroups in mAssetGroupMap
        foreach (QtAssetGroup* group , mAssetGroupMap)
            delete group;

        mAssetGroupMap.clear();

    }

    //****************************************************************************/
    bool QtSceneViewWidget::eventFilter(QObject* object, QEvent* event)
    {
        QMouseEvent* mouseEvent = (QMouseEvent*) event;
        switch ((int) event->type())
        {
            case QEvent::MouseButtonPress:
                mouseClickHandler(mouseEvent);
            break;
        }
        return QObject::eventFilter(object, event);
    }

    //****************************************************************************/
    void QtSceneViewWidget::mouseClickHandler(QMouseEvent* event)
    {
        switch ((int) event->button())
        {
            case Qt::LeftButton:
            {
                // Get the selected item of the visible sceneview
                QTreeWidget* sceneView = getCurrentVisibleScene();
                if (sceneView)
                {
                    //QTreeWidgetItem* item = getCurrentItem(sceneView);
                    QTreeWidgetItem* item = sceneView->itemAt(event->pos());
                    int col = sceneView->columnAt(event->pos().x());
                    if (col == TOOL_SCENEVIEW_COLUMN_GROUP_VISIBILITY)
                    {
                        // Toggle visibility
                        toggleVisibility(item);
                    }
                    else
                    {
                        // Deletion
                        handleDeletion(sceneView, item, col);
                    }
                }
            }
            break;

            case Qt::RightButton:
            {
                //QPoint pos;
                //pos.setX(event->screenPos().x());
                //pos.setY(event->screenPos().y());
                //mContextMenu->popup(pos);
            }
            break;
        }
    }

    //****************************************************************************/
    void QtSceneViewWidget::toggleVisibility(QTreeWidgetItem* item)
    {
        // TODO:
        // - If Group => also make all children visisble / invisible
        // - If Asset => Make asset only visisble/invisible if the Group is visible; if the
        //               group is not visible, the assets cannot be toggled

        if (!item)
            return;

        bool visible = (item->data(TOOL_SCENEVIEW_KEY_VISIBLE, Qt::UserRole)).toBool();
        int col = TOOL_SCENEVIEW_COLUMN_ASSET_VISIBILITY;
        if (itemIsGroup(item))
            col = TOOL_SCENEVIEW_COLUMN_GROUP_VISIBILITY;

        // Set the icon
        QImage imageVis;
        if (visible)
            imageVis = QImage(mIconDir + TOOL_SCENEVIEW_ICON_INVISIBLE);
        else
            imageVis = QImage(mIconDir + TOOL_SCENEVIEW_ICON_VISIBLE);

        QPixmap pixMapVis = QPixmap::fromImage(imageVis).scaled(TOOL_SCENEVIEW_ICON_WIDTH, TOOL_SCENEVIEW_ICON_WIDTH);
        item->setData(col, Qt::DecorationRole, QVariant(pixMapVis));

        // Set the visibility flag
        item->setData(TOOL_SCENEVIEW_KEY_VISIBLE, Qt::UserRole, QVariant(!visible));

        // TODO: emit signal
    }

    //****************************************************************************/
    void QtSceneViewWidget::handleDeletion(QTreeWidget* sceneView, QTreeWidgetItem* item, int col)
    {
        if (!item)
            return;

        if (itemIsGroup(item))
        {
            if (col == TOOL_SCENEVIEW_COLUMN_GROUP_CLOSE)
            {
                // Deletion
                int index = sceneView->indexOfTopLevelItem(item);
                int groupId = getGroupIdOfGroupItem(item);
                sceneView->takeTopLevelItem(index);
                delete item;

                // Emit signal
                emit groupDeleted(sceneView, groupId);
            }
        }
        else if (itemIsAsset(item))
        {
            if (col == TOOL_SCENEVIEW_COLUMN_ASSET_CLOSE)
            {
                // Deletion
                int index = sceneView->indexOfTopLevelItem(item);
                int groupId = getGroupIdOfAssetItem(item);
                int assetId = getAssetIdOfAssetItem(item);
                sceneView->takeTopLevelItem(index);
                delete item;

                // Emit signal
                emit assetDeleted(sceneView, groupId, assetId);
            }
        }
    }

    //****************************************************************************/
    QTreeWidget* QtSceneViewWidget::createSceneView (int sceneId)
    {
        // Create tree
        QTreeWidget* sceneView = new QTreeWidget(this);
        sceneView->setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
        sceneView->setAnimated(true);
        sceneView->setEditTriggers(QAbstractItemView::NoEditTriggers);
        sceneView->setDragEnabled(true);
        sceneView->viewport()->installEventFilter(this);

        // Set headers
        QStringList headers;
        headers << tr("") << tr("Asset Group") << tr("Visibility") << tr("Remove");
        sceneView->setHeaderLabels(headers);
        QFont font;
        font.setBold(true);
        sceneView->header()->setFont(font);

        // Add it to the map
        mSceneViewMap[sceneId] = sceneView;

        // Add the groups
        foreach (QtAssetGroup* group , mAssetGroupMap)
            addGroupToSceneView (sceneView, group->groupIcon, group->groupId, group->groupName);

        // Layout
        mTreeLayout->addWidget(sceneView);

        return sceneView;
    }

    //****************************************************************************/
    void QtSceneViewWidget::deleteSceneView (int sceneId)
    {
        QTreeWidget* sceneView = mSceneViewMap[sceneId];
        mSceneViewMap.remove(sceneId);
        //sceneView->close();
        delete sceneView;
    }

    //****************************************************************************/
    void QtSceneViewWidget::setSceneViewVisible (int sceneId, bool visible)
    {
        QTreeWidget* sceneView = getSceneView (sceneId);
        if (!sceneView)
            return;

        sceneView->setVisible(visible);
    }

    //****************************************************************************/
    void QtSceneViewWidget::setSceneViewVisible (int sceneId)
    {
        QTreeWidget* sceneView = getSceneView (sceneId);
        if (!sceneView)
            return;

        // Set all other sceneviews invisible
        foreach (QTreeWidget* sv, mSceneViewMap)
            if (sv != sceneView)
                sv->setVisible(false);

        // Set the selected one visible
        sceneView->setVisible(true);
    }

    //****************************************************************************/
    void QtSceneViewWidget::setSceneViewsInvisible (void)
    {
        // Set all sceneviews invisible
        foreach (QTreeWidget* sceneView, mSceneViewMap)
            sceneView->setVisible(false);
    }

    //****************************************************************************/
    bool QtSceneViewWidget::sceneViewHasGroup(QTreeWidget* sceneView, int groupId)
    {
        if (!sceneView)
            return false;

        QTreeWidgetItemIterator it(sceneView);
        QVariant groupVar;
        QVariant typeVar;
        while (*it)
        {
            typeVar = (*it)->data(TOOL_SCENEVIEW_KEY_ITEM_TYPE, Qt::UserRole);
            if (typeVar.toInt() == TOOL_SCENEVIEW_KEY_ITEM_TYPE_GROUP)
            {
                groupVar = (*it)->data(TOOL_SCENEVIEW_KEY_GROUPID, Qt::UserRole);
                if (groupVar.toInt() == groupId)
                    return true;
            }

            ++it;
        }

        return false;
    }

    //****************************************************************************/
    QTreeWidgetItem* QtSceneViewWidget::getGroupItem(int sceneId, int groupId)
    {
        QTreeWidget* sceneView = getSceneView (sceneId);
        return getGroupItem (sceneView, groupId);
    }

    //****************************************************************************/
    QTreeWidgetItem* QtSceneViewWidget::getGroupItem(QTreeWidget* sceneView, int groupId)
    {
        if (!sceneView)
            return false;

        QTreeWidgetItemIterator it(sceneView);
        QVariant groupVar;
        QVariant typeVar;
        while (*it)
        {
            typeVar = (*it)->data(TOOL_SCENEVIEW_KEY_ITEM_TYPE, Qt::UserRole);
            if (typeVar.toInt() == TOOL_SCENEVIEW_KEY_ITEM_TYPE_GROUP)
            {
                groupVar = (*it)->data(TOOL_SCENEVIEW_KEY_GROUPID, Qt::UserRole);
                if (groupVar.toInt() == groupId)
                        return *it;
            }

                ++it;
        }

        return 0;
    }

    //****************************************************************************/
    void QtSceneViewWidget::addGroup (int groupId, const QString& iconName, const QString& groupName)
    {
        // Add group to list
        QtAssetGroup* group = new QtAssetGroup();
        group->groupId = groupId;
        group->groupIcon = iconName;
        group->groupName = groupName;
        mAssetGroupMap[groupId] = group;

        // Add groups to current sceneviews
        foreach (QTreeWidget* sceneView, mSceneViewMap)
        {
            if (!sceneViewHasGroup(sceneView, groupId))
                addGroupToSceneView(sceneView, iconName, groupId, groupName);
        }
    }

    //****************************************************************************/
    void QtSceneViewWidget::addGroupToSceneView (int sceneId,
                                                 const QString& iconName,
                                                 int groupId,
                                                 const QString& groupName)
    {
        QTreeWidget* sceneView = getSceneView (sceneId);
        addGroupToSceneView (sceneView, iconName, groupId, groupName);
    }

    //****************************************************************************/
    void QtSceneViewWidget::addGroupToSceneView (QTreeWidget* sceneView,
                                                 const QString& iconName,
                                                 int groupId,
                                                 const QString& groupName)
    {
        if (!sceneView)
            return;

        // A group can only be added once
        if (groupExists(sceneView, groupId))
            return;

        QTreeWidgetItem* group = new QTreeWidgetItem();
        group->setChildIndicatorPolicy(QTreeWidgetItem::ShowIndicator);

        // Set icon
        QImage imageIcon(mIconDir + iconName);
        QPixmap pixMapIcon = QPixmap::fromImage(imageIcon).scaled(TOOL_SCENEVIEW_ICON_WIDTH, TOOL_SCENEVIEW_ICON_WIDTH);
        group->setData(TOOL_SCENEVIEW_COLUMN_ICON, Qt::DecorationRole, QVariant(pixMapIcon));

        // Set groupname
        group->setText(TOOL_SCENEVIEW_COLUMN_GROUP_NAME, groupName);

        // Set visibility icon
        QImage imageVis(mIconDir + TOOL_SCENEVIEW_ICON_VISIBLE);
        QPixmap pixMapVis = QPixmap::fromImage(imageVis).scaled(TOOL_SCENEVIEW_ICON_WIDTH, TOOL_SCENEVIEW_ICON_WIDTH);
        group->setData(TOOL_SCENEVIEW_COLUMN_GROUP_VISIBILITY, Qt::DecorationRole, QVariant(pixMapVis));

        // Set close icon
        QImage imageClose(mIconDir + TOOL_SCENEVIEW_ICON_CLOSE);
        QPixmap pixMapClose = QPixmap::fromImage(imageClose).scaled(TOOL_SCENEVIEW_ICON_WIDTH, TOOL_SCENEVIEW_ICON_WIDTH);
        group->setData(TOOL_SCENEVIEW_COLUMN_GROUP_CLOSE, Qt::DecorationRole, QVariant(pixMapClose));

        // Set groupId
        group->setData(TOOL_SCENEVIEW_KEY_GROUPID, Qt::UserRole, QVariant(groupId));

        // Set type
        group->setData(TOOL_SCENEVIEW_KEY_ITEM_TYPE, Qt::UserRole, QVariant(TOOL_SCENEVIEW_KEY_ITEM_TYPE_GROUP));

        // Set indication visibility
        group->setData(TOOL_SCENEVIEW_KEY_VISIBLE, Qt::UserRole, QVariant(true));

        // Add it to the table
        sceneView->addTopLevelItem(group);

        // Emit signal
        emit groupCreatedOrAdded(sceneView, groupId);
    }

    //****************************************************************************/
    void QtSceneViewWidget::addAssetToSceneView (int sceneId, int groupId, int assetId, const QString& assetName)
    {
        // Get the sceneview
        QTreeWidget* sceneView = getSceneView(sceneId);
        addAssetToSceneView (sceneView, groupId, assetId, assetName);
    }

    //****************************************************************************/
    void QtSceneViewWidget::addAssetToSceneView (QTreeWidget* sceneView, int groupId, int assetId, const QString& assetName)
    {
        if (!sceneView)
            return;

        // Check whether the group also exists (it must exist)
        if (!groupExists (sceneView, groupId))
            return;

        // First check whether the asset already exists
        if (assetExists (sceneView, groupId, assetId))
            return;

        QTreeWidgetItem* asset = new QTreeWidgetItem();

        // Set asset id
        asset->setData(TOOL_SCENEVIEW_KEY_ASSETID, Qt::UserRole, QVariant(assetId));

        // Set type
        asset->setData(TOOL_SCENEVIEW_KEY_ITEM_TYPE, Qt::UserRole, QVariant(TOOL_SCENEVIEW_KEY_ITEM_TYPE_ASSET));

        // Set indication visibility
        asset->setData(TOOL_SCENEVIEW_KEY_VISIBLE, Qt::UserRole, QVariant(true));

        // Set name
        asset->setText(TOOL_SCENEVIEW_COLUMN_ASSET_NAME, assetName);

        // Set visibility
        QImage imageVis(mIconDir + TOOL_SCENEVIEW_ICON_VISIBLE);
        QPixmap pixMapVis = QPixmap::fromImage(imageVis).scaled(TOOL_SCENEVIEW_ICON_WIDTH, TOOL_SCENEVIEW_ICON_WIDTH);
        asset->setData(TOOL_SCENEVIEW_COLUMN_ASSET_VISIBILITY, Qt::DecorationRole, QVariant(pixMapVis));

        // Set close icon
        QImage imageClose(mIconDir + TOOL_SCENEVIEW_ICON_CLOSE);
        QPixmap pixMapClose = QPixmap::fromImage(imageClose).scaled(TOOL_SCENEVIEW_ICON_WIDTH, TOOL_SCENEVIEW_ICON_WIDTH);
        asset->setData(TOOL_SCENEVIEW_COLUMN_ASSET_CLOSE, Qt::DecorationRole, QVariant(pixMapClose));

        // Get the right toplevel item
        QTreeWidgetItem* group = getGroupItem(sceneView, groupId);
        if (group)
            group->addChild(asset);

        // Emit signal
        emit assetCreatedOrAdded(sceneView, groupId, assetId);
    }

    //****************************************************************************/
    bool QtSceneViewWidget::assetExists (int sceneId, int groupId, int assetId)
    {
        QTreeWidget* sceneView = getSceneView(sceneId);
        return assetExists (sceneView, groupId, assetId);
    }

    //****************************************************************************/
    bool QtSceneViewWidget::assetExists (QTreeWidget* sceneView, int groupId, int assetId)
    {
        QTreeWidgetItem* groupItem = getGroupItem(sceneView, groupId);

        if (!groupItem)
            return false;

        QTreeWidgetItemIterator it(groupItem);
        while (*it)
        {
            if (itemIsAsset(*it) && (*it)->parent() == groupItem)
            {
                if (assetId == getAssetIdOfAssetItem (*it))
                    return true;
            }

            ++it;
        }

        return false;
    }

    //****************************************************************************/
    bool QtSceneViewWidget::groupExists (int sceneId, int groupId)
    {
        return getGroupItem(sceneId, groupId);
    }

    //****************************************************************************/
    bool QtSceneViewWidget::groupExists (QTreeWidget* sceneView, int groupId)
    {
        return getGroupItem(sceneView, groupId);
    }

    //****************************************************************************/
    const QtAssetGroup& QtSceneViewWidget::getGroupInfo(int groupId)
    {
        mResultAssetGroupInfo.groupId = groupId;
        mResultAssetGroupInfo.groupIcon = mAssetGroupMap[groupId]->groupIcon;
        mResultAssetGroupInfo.groupName = mAssetGroupMap[groupId]->groupName;
        return mResultAssetGroupInfo;
    }

    //****************************************************************************/
    QTreeWidget* QtSceneViewWidget::getSceneView (int sceneId)
    {
        return mSceneViewMap[sceneId];
    }

    //****************************************************************************/
    QTreeWidgetItem* QtSceneViewWidget::getCurrentItem(int sceneId)
    {
        QTreeWidget* sceneView = getSceneView (sceneId);
        return getCurrentItem(sceneView);
    }

    //****************************************************************************/
    QTreeWidgetItem* QtSceneViewWidget::getCurrentItem(QTreeWidget* sceneView)
    {
        if (sceneView)
            return sceneView->currentItem();

        return 0;
    }

    //****************************************************************************/
    QTreeWidgetItem* QtSceneViewWidget::getCurrentItemOfCurrentScene (void)
    {
        QTreeWidget* sceneView = getCurrentVisibleScene();
        if (sceneView)
            return getCurrentItem(sceneView);

        return 0;
    }

    //****************************************************************************/
    QTreeWidget* QtSceneViewWidget::getCurrentVisibleScene (void)
    {
        // Iterate through the mSceneViewMap and return the first visible one
        foreach (QTreeWidget* sceneView, mSceneViewMap)
            if (sceneView->isVisible())
                return sceneView;

        return 0;
    }

    //****************************************************************************/
    QVector<QTreeWidgetItem*> QtSceneViewWidget::getAssetItemsOfGroup (int sceneId, int groupId)
    {
        mResultItemVec.clear();
        QTreeWidgetItem* groupItem = getGroupItem(sceneId, groupId);
        if (groupItem)
        {
            QTreeWidgetItemIterator it(groupItem);
            while (*it)
            {
                if (itemIsAsset(*it) && (*it)->parent() == groupItem)
                {
                    mResultItemVec.append(*it);
                }

                ++it;
            }
        }

        return mResultItemVec;
    }

    //****************************************************************************/
    bool QtSceneViewWidget::itemIsGroup(QTreeWidgetItem* item)
    {
        if (!item)
            return false;

        QVariant typeVar = item->data(TOOL_SCENEVIEW_KEY_ITEM_TYPE, Qt::UserRole);
        return (typeVar.toInt() == TOOL_SCENEVIEW_KEY_ITEM_TYPE_GROUP);
    }

    //****************************************************************************/
    bool QtSceneViewWidget::itemIsAsset(QTreeWidgetItem* item)
    {
        if (!item)
            return false;

        QVariant typeVar = item->data(TOOL_SCENEVIEW_KEY_ITEM_TYPE, Qt::UserRole);
        return (typeVar.toInt() == TOOL_SCENEVIEW_KEY_ITEM_TYPE_ASSET);
    }

    //****************************************************************************/
    void QtSceneViewWidget::enableDragAndDrop (bool enabled)
    {
        foreach (QTreeWidget* sceneView, mSceneViewMap)
        {
            sceneView->setAcceptDrops(enabled);
            sceneView->setDragEnabled(enabled);
        }
    }

    //****************************************************************************/
    int QtSceneViewWidget::getCurrentGroupId(int sceneId)
    {
        QTreeWidgetItem* item = getCurrentItem(sceneId);
        return getCurrentGroupId (item);
    }

    //****************************************************************************/
    int QtSceneViewWidget::getCurrentGroupId(QTreeWidgetItem* item)
    {
        if (itemIsGroup(item))
        {
            return getGroupIdOfGroupItem(item);
        }
        else if (itemIsAsset(item))
        {
            QTreeWidgetItem* parent = item->parent();
            if (itemIsGroup(parent))
            {
                return getGroupIdOfGroupItem(parent);
            }
        }

        return -1;
    }

    //****************************************************************************/
    int QtSceneViewWidget::getGroupIdOfGroupItem(QTreeWidgetItem* groupItem)
    {
        if (!itemIsGroup(groupItem))
            return -1;

        QVariant typeVar = groupItem->data(TOOL_SCENEVIEW_KEY_GROUPID, Qt::UserRole);
        return typeVar.toInt();
    }

    //****************************************************************************/
    const QString& QtSceneViewWidget::getGroupNameOfGroupItem(QTreeWidgetItem* groupItem)
    {
        if (groupItem)
            mResultText = groupItem->text(TOOL_SCENEVIEW_COLUMN_GROUP_NAME);

        return mResultText;
    }

    //****************************************************************************/
    int QtSceneViewWidget::getGroupIdOfAssetItem(QTreeWidgetItem* assetItem)
    {
        if (!itemIsAsset(assetItem))
            return -1;

        QTreeWidgetItem* groupItem = assetItem->parent();
        return getGroupIdOfGroupItem(groupItem);
    }

    //****************************************************************************/
    int QtSceneViewWidget::getAssetIdOfAssetItem(QTreeWidgetItem* assetItem)
    {
        if (!itemIsAsset(assetItem))
            return -1;

        QVariant typeVar = assetItem->data(TOOL_SCENEVIEW_KEY_ASSETID, Qt::UserRole);
        return typeVar.toInt();
    }

    //****************************************************************************/
    const QString& QtSceneViewWidget::getAssetNameOfAssetItem(QTreeWidgetItem* assetItem)
    {
        if (assetItem)
            mResultText = assetItem->text(TOOL_SCENEVIEW_COLUMN_ASSET_NAME);

        return mResultText;
    }
}
