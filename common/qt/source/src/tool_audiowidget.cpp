/****************************************************************************
**
** Copyright (C) 2015
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QMessageBox>
#include <QDir>
#include <QLabel>
#include <QImageReader>
#include <QListWidgetItem>
#include <QMouseEvent>
#include <QProcess>
#include "tool_audiowidget.h"

namespace Magus
{
    //****************************************************************************/
    QtAudioAndText::QtAudioAndText(const QString& iconDir,
                                   Source source,
                                   const QString& name,
                                   const QString& baseName,
                                   const QSize& size,
                                   QWidget* parent) : QWidget(parent)
    {
        setContentsMargins(-8, -8, -8, -8);
        setMinimumSize(size);
        setMaximumSize(size);
        QHBoxLayout* mainLayout = new QHBoxLayout;
        QVBoxLayout* audioAndNameLayout = new QVBoxLayout;
        mPixmapAudioPlay = QPixmap(iconDir + TOOL_AUDIOWIDGET_ICON_PLAY);
        mPixmapAudioPause = QPixmap(iconDir + TOOL_AUDIOWIDGET_ICON_PAUSE);
        mPixmapAudioStop = QPixmap(iconDir + TOOL_AUDIOWIDGET_ICON_STOP);

        mName = name;
        mBaseName = baseName;
        mSource = source;
        mBaseNameEdit = new QLineEdit;
        mBaseNameEdit->setText(mBaseName);
        mBaseNameEdit->setEnabled(false);

        mTextureLabel = new QLabel();
        mTextureLabel->setPixmap(mPixmapAudioStop);
        mTextureLabel->setScaledContents(true);
        setMouseTracking(true);

        // Layout
        audioAndNameLayout->addWidget(mTextureLabel, 1000);
        audioAndNameLayout->addWidget(mBaseNameEdit, 1);
        mainLayout->addLayout(audioAndNameLayout);
        setLayout(mainLayout);
    }

    //****************************************************************************/
    QtAudioAndText::~QtAudioAndText(void)
    {
    }

    //****************************************************************************/
    void QtAudioAndText::setPlay(void)
    {
        mTextureLabel->setPixmap(mPixmapAudioPlay);
    }

    //****************************************************************************/
    void QtAudioAndText::setPause(void)
    {
        mTextureLabel->setPixmap(mPixmapAudioPause);
    }

    //****************************************************************************/
    void QtAudioAndText::setStop(void)
    {
        mTextureLabel->setPixmap(mPixmapAudioStop);
    }

    //****************************************************************************/
    //****************************************************************************/
    //****************************************************************************/
    QtAudioListWidget::QtAudioListWidget(QWidget* parent) : QListWidget(parent)
    {
        setMouseTracking(true);
        setAcceptDrops(true);
        setDropIndicatorShown(true);
    }

    //****************************************************************************/
    QtAudioListWidget::~QtAudioListWidget(void)
    {
    }

    //****************************************************************************/
    void QtAudioListWidget::keyPressEvent(QKeyEvent* event)
    {
        switch (event->key())
        {
            case Qt::Key_Delete:
            {
                if (count() > 0)
                {
                    QListWidgetItem* item = currentItem();
                    if (item)
                    {
                        QWidget* widget = itemWidget(item);
                        if (widget)
                        {
                            int r = row(item);
                            QtAudioAndText* audioAndText = static_cast<QtAudioAndText*>(widget);
                            QString name = audioAndText->mName;
                            QString baseName = audioAndText->mBaseName;
                            removeItemWidget(item);
                            takeItem(r);
                            emit assetDeleted(name, baseName);
                        }
                    }
                }
            }
            break;
        }

        event->accept();
    }

    //****************************************************************************/
    void QtAudioListWidget::dropEvent(QDropEvent* event)
    {
        const QMimeData *mimeData = event->mimeData();
        if (mimeData->hasUrls())
        {
            QList<QUrl> urlList = mimeData->urls();
            for (int i = 0; i < urlList.size(); ++i)
            {
                QString baseName = urlList.at(i).fileName();
                if (isTypeBasedOnExtension(baseName, MAGUS_SUPPORTED_AUDIO_FORMATS, MAGUS_SUPPORTED_AUDIO_FORMATS_LENGTH))
                {
                    QString name = urlList.at(i).path();
                    stripLeadingSlashes(name);
                    //QMessageBox::information(0, QString("drop"), name); // test
                    emit audioFileDropped(name, baseName);
                }
            }
        }
        event->acceptProposedAction();
    }

    //****************************************************************************/
    void QtAudioListWidget::dragEnterEvent(QDragEnterEvent *event)
    {
        event->acceptProposedAction();
    }

    //****************************************************************************/
    void QtAudioListWidget::dragMoveEvent(QDragMoveEvent *event)
    {
        event->acceptProposedAction();
    }

    //****************************************************************************/
    //****************************************************************************/
    //****************************************************************************/
    QtAudioWidget::QtAudioWidget(const QString& iconDir, QWidget* parent) : QWidget(parent)
    {
        mNameAudio = QString("");
        mBaseNameAudio = QString("");
        mSystemCommandEditAsset = QString("");
        mCurrentAudioPlaying = QString("");
        mLastSelectedAudioAndText = 0;
        mAudioPlayer = new QMediaPlayer();
        connect(mAudioPlayer, SIGNAL(positionChanged(qint64)), this, SLOT(handlePositionChanged(qint64)));
        mContextMenu = 0;
        mIconDir = iconDir;
        setWindowTitle(QString("Texture selection"));
        mTextureSize = QSize(128, 128);
        QHBoxLayout* mainLayout = new QHBoxLayout;
        QVBoxLayout* textureSelectionLayout = new QVBoxLayout;

        // Define selection widget (QtAudioListWidget)
        mSelectionList = new QtAudioListWidget();
        mSelectionList->setViewMode(QListView::ListMode);
        mSelectionList->setWrapping(true);
        mSelectionList->setWordWrap(true);
        mSelectionList->setSpacing(0);
        mSelectionList->setUniformItemSizes(true);
        mSelectionList->setMovement(QListView::Snap);
        mSelectionList->setFlow(QListView::LeftToRight);
        connect(mSelectionList, SIGNAL(audioFileDropped(QString,QString)), this, SLOT(handleAudioFileDropped(QString,QString)));
        connect(mSelectionList, SIGNAL(itemClicked(QListWidgetItem*)), this, SLOT(handleSelected(QListWidgetItem*)));
        connect(mSelectionList, SIGNAL(itemDoubleClicked(QListWidgetItem*)), this, SLOT(handleDoubleClicked(QListWidgetItem*)));
        connect(mSelectionList, SIGNAL(itemEntered(QListWidgetItem*)), this, SLOT(handleMouseOver(QListWidgetItem*)));
        connect(mSelectionList, SIGNAL(assetDeleted(QString,QString)), this, SLOT(handleAssetDeleted(QString,QString)));

        // Layout
        textureSelectionLayout->addWidget(mSelectionList);
        mainLayout->addLayout(textureSelectionLayout);
        setLayout(mainLayout);
    }

    //****************************************************************************/
    QtAudioWidget::~QtAudioWidget(void)
    {
    }

    //****************************************************************************/
    void QtAudioWidget::addAudio(Source source, const QString& name, const QString& baseName)
    {
        QtAudioAndText* audioAndText = new QtAudioAndText(mIconDir, source, name, baseName, mTextureSize, this);
        QListWidgetItem* item = new QListWidgetItem();
        item->setSizeHint(mTextureSize); // Must be present, otherwise the widget is not shown
        mSelectionList->addItem(item);
        mSelectionList->setItemWidget(item, audioAndText);
        buildContextMenu();
    }

    //****************************************************************************/
    void QtAudioWidget::deleteAudio(const QString& name, bool nameIsFullName)
    {
        QtAudioAndText* audioAndText;
        QWidget* widget;
        int row;
        QList<QListWidgetItem*> list = mSelectionList->findItems(QString("*"), Qt::MatchWildcard);
        foreach (QListWidgetItem* item, list)
        {
            widget = mSelectionList->itemWidget(item);
            if (widget)
            {
                audioAndText = static_cast<QtAudioAndText*>(widget);
                if ((audioAndText->mName == name && nameIsFullName) ||
                    (audioAndText->mBaseName == name && !nameIsFullName))
                {
                    if (mLastSelectedAudioAndText = audioAndText)
                        mLastSelectedAudioAndText = 0;

                    row = mSelectionList->row(item);
                    mSelectionList->removeItemWidget(item);
                    mSelectionList->takeItem(row);
                    return;
                }
            }
        }
    }

    //****************************************************************************/
    void QtAudioWidget::deleteAudio(const QString& name, const QString& baseName)
    {
        QtAudioAndText* audioAndText;
        QWidget* widget;
        int row;
        QList<QListWidgetItem*> list = mSelectionList->findItems(QString("*"), Qt::MatchWildcard);
        foreach (QListWidgetItem* item, list)
        {
            widget = mSelectionList->itemWidget(item);
            if (widget)
            {
                audioAndText = static_cast<QtAudioAndText*>(widget);
                if (audioAndText->mName == name && audioAndText->mBaseName == baseName)
                {
                    if (mLastSelectedAudioAndText = audioAndText)
                        mLastSelectedAudioAndText = 0;

                    row = mSelectionList->row(item);
                    mSelectionList->removeItemWidget(item);
                    mSelectionList->takeItem(row);
                    return;
                }
            }
        }
    }

    //****************************************************************************/
    const QString& QtAudioWidget::getNameAudio(void)
    {
        return mNameAudio;
    }

    //****************************************************************************/
    const QString& QtAudioWidget::getBaseNameAudio(void)
    {
        return mBaseNameAudio;
    }

    //****************************************************************************/
    bool QtAudioWidget::eventFilter(QObject* object, QEvent* event)
    {
        //QMessageBox::information(0, "test", "test"); // Test
        QMouseEvent* mouseEvent = (QMouseEvent*) event;
        switch ((int) event->type())
        {
            case QEvent::MouseButtonPress:
                mouseClickHandler(mouseEvent);
            break;

        }
        //event->accept();
        return QObject::eventFilter(object, event);
    }

    //****************************************************************************/
    void QtAudioWidget::mouseClickHandler(QMouseEvent* event)
    {
        switch ((int) event->button())
        {
            case Qt::RightButton:
            {
                handleSelected(mSelectionList->currentItem());
                if (mContextMenu)
                {
                    QPoint pos;
                    pos.setX(event->screenPos().x());
                    pos.setY(event->screenPos().y());
                    mContextMenu->popup(pos);
                }
                event->accept();
            }
            break;
        }
    }

    //****************************************************************************/
    void QtAudioWidget::buildContextMenu(void)
    {
        if (!mContextMenu)
        {
            mSelectionList->viewport()->installEventFilter(this);
            mContextMenu = new QMenu(mSelectionList);
            connect(mContextMenu, SIGNAL(triggered(QAction*)), this, SLOT(contextMenuItemSelected(QAction*)));
            mContextMenu->addAction(new QAction(TOOL_AUDIOWIDGET_ACTION_PLAY, mSelectionList));
            mContextMenu->addAction(new QAction(TOOL_AUDIOWIDGET_ACTION_PAUSE, mSelectionList));
            mContextMenu->addAction(new QAction(TOOL_AUDIOWIDGET_ACTION_STOP, mSelectionList));
        }
    }

    //****************************************************************************/
    void QtAudioWidget::clearContent(void)
    {
        mSelectionList->clear();
    }

    //****************************************************************************/
    void QtAudioWidget::handleSelected(QListWidgetItem* item)
    {
        QWidget* widget = mSelectionList->itemWidget(item);
        if (widget)
        {
            QtAudioAndText* audioAndText = static_cast<QtAudioAndText*>(widget);

            // First stop the audio of the latest one
            if (mLastSelectedAudioAndText != audioAndText)
            {
                if (mLastSelectedAudioAndText)
                    stopAudio(mLastSelectedAudioAndText);
                mLastSelectedAudioAndText = audioAndText;
            }
            mNameAudio = audioAndText->mName;
            mBaseNameAudio = audioAndText->mBaseName;
            emit selected(audioAndText->mName, audioAndText->mBaseName);
        }
    }

    //****************************************************************************/
    void QtAudioWidget::handleAssetDeleted(const QString& name, const QString& baseName)
    {
        mLastSelectedAudioAndText = 0; // Set to 0, because this one does not exist anymore
        emit assetDeleted(name, baseName);
    }

    //****************************************************************************/
    void QtAudioWidget::handleDoubleClicked(QListWidgetItem* item)
    {
        QWidget* widget = mSelectionList->itemWidget(item);
        if (widget)
        {
            QtAudioAndText* audioAndText = static_cast<QtAudioAndText*>(widget);
            if (mSystemCommandEditAsset.isEmpty())
            {
                playAudio(audioAndText->mSource, audioAndText->mName, audioAndText);
                mLastSelectedAudioAndText = audioAndText;
            }
            else
            {
                QProcess p;
                QStringList sl;
                sl.append(audioAndText->mName);
                p.startDetached(mSystemCommandEditAsset, sl);
            }
            emit doubleClicked(audioAndText->mName, audioAndText->mBaseName);
        }
    }

    //****************************************************************************/
    void QtAudioWidget::contextMenuItemSelected(QAction* action)
    {
        QListWidgetItem* item = mSelectionList->currentItem();
        if (item)
        {
            QtAudioAndText* audioAndText = static_cast<QtAudioAndText*>(mSelectionList->itemWidget(item));
            if (action->text() == TOOL_AUDIOWIDGET_ACTION_PLAY)
                playAudio(audioAndText->mSource, audioAndText->mName, audioAndText);
            else if (action->text() == TOOL_AUDIOWIDGET_ACTION_PAUSE)
                pauseAudio(audioAndText);
            else if (action->text() == TOOL_AUDIOWIDGET_ACTION_STOP)
                stopAudio(audioAndText);
        }
    }

    //****************************************************************************/
    void QtAudioWidget::handlePositionChanged(qint64 position)
    {
        qint64 size = mAudioPlayer->duration();
        if (position >= size)
        {
            QtAudioAndText* audioAndText = 0;
            QListWidgetItem* item = mSelectionList->currentItem();
            if (item)
                audioAndText = static_cast<QtAudioAndText*>(mSelectionList->itemWidget(item));

            stopAudio(audioAndText);
        }
    }

    //****************************************************************************/
    void QtAudioWidget::handleAudioFileDropped (const QString& name, const QString& baseName)
    {
        addAudio(SOURCE_FILE, name, baseName);
        emit audioFileDropped (name, baseName);
    }

    //****************************************************************************/
    void QtAudioWidget::handleMouseOver(QListWidgetItem* item)
    {
        QWidget* widget = mSelectionList->itemWidget(item);
        if (widget)
        {
            QtAudioAndText* audioAndText = static_cast<QtAudioAndText*>(widget);
            QString name = audioAndText->mName;
            mSelectionList->setToolTip(name);
        }
    }

    //****************************************************************************/
    void QtAudioWidget::playAudio(Source source, QString name, QtAudioAndText* audioAndText)
    {
        if (name != mCurrentAudioPlaying)
            if (source == SOURCE_FILE)
            {
                mAudioPlayer->setMedia(QUrl::fromLocalFile(name));
                mCurrentAudioPlaying = name;
            }
        mAudioPlayer->setVolume(100);
        mAudioPlayer->play();

        if (audioAndText)
            audioAndText->setPlay();
    }

    //****************************************************************************/
    void QtAudioWidget::pauseAudio(QtAudioAndText* audioAndText)
    {
        if (audioAndText)
            audioAndText->setPause();

        mAudioPlayer->pause();
    }

    //****************************************************************************/
    void QtAudioWidget::stopAudio(QtAudioAndText* audioAndText)
    {
        if (audioAndText)
            audioAndText->setStop();

        mAudioPlayer->stop();
        mCurrentAudioPlaying = QString("");
    }

    //****************************************************************************/
    void QtAudioWidget::setTextureSize (QSize size)
    {
        mTextureSize = size;
    }

    //****************************************************************************/
    void QtAudioWidget::filter(const QString& pattern)
    {
        QtAudioAndText* audioAndText;
        QWidget* widget;
        QString name;
        QList<QListWidgetItem*> list = mSelectionList->findItems(QString("*"), Qt::MatchWildcard);
        foreach (QListWidgetItem* item, list)
        {
            widget = mSelectionList->itemWidget(item);
            if (widget)
            {
                audioAndText = static_cast<QtAudioAndText*>(widget);
                name = audioAndText->mBaseName;
                name = name.toLower();
                if (!name.contains(pattern))
                    item->setHidden(true);
            }
        }
    }

    //****************************************************************************/
    void QtAudioWidget::resetFilter(void)
    {
        QList<QListWidgetItem*> list = mSelectionList->findItems(QString("*"), Qt::MatchWildcard);
        foreach (QListWidgetItem* item, list)
            item->setHidden(false);
    }

    //****************************************************************************/
    void QtAudioWidget::setDropFilesAllowed(bool allowed)
    {
        mSelectionList->setMouseTracking(allowed);
        mSelectionList->setAcceptDrops(allowed);
        mSelectionList->setDropIndicatorShown(allowed);
    }

    //****************************************************************************/
    void QtAudioWidget::setSystemCommandEditAsset(const QString& systemCommand)
    {
        mSystemCommandEditAsset = systemCommand;
    }

}
