/****************************************************************************
**
** Copyright (C) 2015
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QMessageBox>
#include <QDir>
#include <QImageReader>
#include <QListWidgetItem>
#include "magus_core.h"
#include "tool_extended_texturewidget.h"

namespace Magus
{
    //****************************************************************************/
    QtTextureAndText::QtTextureAndText(const QPixmap& pixmap,
                                       const QString& name,
                                       const QString& baseName,
                                       const QSize& size,
                                       QWidget* parent) : QWidget(parent)
    {
        setContentsMargins(-8, -8, -8, -8);
        QHBoxLayout* mainLayout = new QHBoxLayout;
        QVBoxLayout* sphereAndNameLayout = new QVBoxLayout;
        mName = name;
        mBaseName = baseName;
        mSphereWidget = new QtGLSphereWidget(this);
        mSphereWidget->setPixmap(pixmap, name, baseName);
        mBaseNameEdit = new QLineEdit;
        mBaseNameEdit->setText(mBaseName);
        mBaseNameEdit->setEnabled(false);
        connect(mSphereWidget, SIGNAL(selected(QString,QString)), this, SLOT(handleSelected(QString,QString)));

        // Layout
        sphereAndNameLayout->addWidget(mSphereWidget, 1000);
        sphereAndNameLayout->addWidget(mBaseNameEdit, 1);
        mainLayout->addLayout(sphereAndNameLayout);
        setLayout(mainLayout);
        setMinimumSize(size);
        setMaximumSize(size);
    }

    //****************************************************************************/
    QtTextureAndText::~QtTextureAndText(void)
    {
    }

    //****************************************************************************/
    void QtTextureAndText::handleSelected(const QString& name, const QString& baseName)
    {
        emit selected(name, baseName);
    }

    //****************************************************************************/
    //****************************************************************************/
    //****************************************************************************/
    QtExtendedTextureListWidget::QtExtendedTextureListWidget(QWidget* parent) : QListWidget(parent)
    {
        setMouseTracking(true);
        setAcceptDrops(true);
        setDropIndicatorShown(true);
    }

    //****************************************************************************/
    QtExtendedTextureListWidget::~QtExtendedTextureListWidget(void)
    {
    }

    //****************************************************************************/
    void QtExtendedTextureListWidget::dropEvent(QDropEvent* event)
    {
        const QMimeData *mimeData = event->mimeData();
        if (mimeData->hasUrls())
        {
            QList<QUrl> urlList = mimeData->urls();
            for (int i = 0; i < urlList.size(); ++i)
            {
                QString baseName = urlList.at(i).fileName();
                if (isTypeBasedOnExtension(baseName, MAGUS_SUPPORTED_IMAGE_FORMATS, MAGUS_SUPPORTED_IMAGE_FORMATS_LENGTH))
                {
                    QString name = urlList.at(i).path();
                    stripLeadingSlashes(name);
                    emit textureFileDropped(name, baseName);
                }
            }
        }
        event->acceptProposedAction();
    }

    //****************************************************************************/
    void QtExtendedTextureListWidget::dragEnterEvent(QDragEnterEvent *event)
    {
        event->acceptProposedAction();
    }

    //****************************************************************************/
    void QtExtendedTextureListWidget::dragMoveEvent(QDragMoveEvent *event)
    {
        event->acceptProposedAction();
    }

    //****************************************************************************/
    //****************************************************************************/
    //****************************************************************************/
    QtExtendedTextureWidget::QtExtendedTextureWidget(QWidget* parent) : QWidget(parent)
    {
        setWindowTitle(QString("Texture selection"));
        mNameTexture = QString("");
        mBaseNameTexture = QString("");
        mTextureSize = QSize(128, 128);
        mOriginIsFile = true;
        QHBoxLayout* mainLayout = new QHBoxLayout;
        QVBoxLayout* textureSelectionLayout = new QVBoxLayout;

        // Define selection widget (QListWidget)
        mSelectionList = new QtExtendedTextureListWidget(this);
        mSelectionList->setViewMode(QListView::ListMode);
        mSelectionList->setSpacing(0);
        mSelectionList->setMovement(QListView::Snap);
        mSelectionList->setFlow(QListView::LeftToRight);
        mSelectionList->setWrapping(true);
        mSelectionList->setWordWrap(true);
        connect(mSelectionList, SIGNAL(textureFileDropped(QString,QString)), this, SLOT(handleTextureFileDropped(QString,QString)));

        // Layout
        textureSelectionLayout->addWidget(mSelectionList);
        mainLayout->addLayout(textureSelectionLayout);
        setLayout(mainLayout);
    }

    //****************************************************************************/
    QtExtendedTextureWidget::~QtExtendedTextureWidget(void)
    {
    }

    //****************************************************************************/
    void QtExtendedTextureWidget::addTexture(const QPixmap& pixmap, const QString& name, const QString& baseName)
    {
        QtTextureAndText* textureAndText = new QtTextureAndText(pixmap, name, baseName, mTextureSize, this);
        QListWidgetItem* item = new QListWidgetItem();
        item->setSizeHint(mTextureSize); // Must be present, otherwise the widget is not shown
        mSelectionList->addItem(item);
        mSelectionList->setItemWidget(item, textureAndText);
        connect(textureAndText, SIGNAL(selected(QString,QString)), this, SLOT(handleSelected(QString,QString)));
    }

    //****************************************************************************/
    void QtExtendedTextureWidget::deleteTexture(const QString& name, bool nameIsFullName)
    {
        QtTextureAndText* textureAndText;
        QWidget* widget;
        int row;
        QList<QListWidgetItem*> list = mSelectionList->findItems(QString("*"), Qt::MatchWildcard);
        foreach (QListWidgetItem* item, list)
        {
            widget = mSelectionList->itemWidget(item);
            if (widget)
            {
                textureAndText = static_cast<QtTextureAndText*>(widget);
                if ((textureAndText->mName == name && nameIsFullName) ||
                    (textureAndText->mBaseName == name && !nameIsFullName))
                {
                    row = mSelectionList->row(item);
                    mSelectionList->removeItemWidget(item);
                    mSelectionList->takeItem(row);
                    return;
                }
            }
        }
    }

    //****************************************************************************/
    void QtExtendedTextureWidget::deleteTexture(const QString& name, const QString& baseName)
    {
        QtTextureAndText* textureAndText;
        QWidget* widget;
        int row;
        QList<QListWidgetItem*> list = mSelectionList->findItems(QString("*"), Qt::MatchWildcard);
        foreach (QListWidgetItem* item, list)
        {
            widget = mSelectionList->itemWidget(item);
            if (widget)
            {
                textureAndText = static_cast<QtTextureAndText*>(widget);
                if (textureAndText->mName == name && textureAndText->mBaseName == baseName)
                {
                    row = mSelectionList->row(item);
                    mSelectionList->removeItemWidget(item);
                    mSelectionList->takeItem(row);
                    return;
                }
            }
        }
    }

    //****************************************************************************/
    void QtExtendedTextureWidget::setOriginIsFile(bool originIsFile)
    {
        mOriginIsFile = originIsFile;
    }

    //****************************************************************************/
    void QtExtendedTextureWidget::clearContent(void)
    {
        mSelectionList->clear();
    }

    //****************************************************************************/
    const QString& QtExtendedTextureWidget::getNameTexture(void)
    {
        return mNameTexture;
    }

    //****************************************************************************/
    const QString& QtExtendedTextureWidget::getBaseNameTexture(void)
    {
        return mBaseNameTexture;
    }

    //****************************************************************************/
    void QtExtendedTextureWidget::handleSelected(const QString& name, const QString& baseName)
    {
        emit selected(name, baseName);
    }

    //****************************************************************************/
    void QtExtendedTextureWidget::handleTextureFileDropped(const QString& name, const QString& baseName)
    {
        QPixmap pixmap(name);
        addTexture(pixmap, name, baseName);
        emit textureFileDropped(name, baseName);
    }

    //****************************************************************************/
    void QtExtendedTextureWidget::setTextureSize (QSize size)
    {
        mTextureSize = size;
    }

    //****************************************************************************/
    void QtExtendedTextureWidget::filter(const QString& pattern)
    {
        QtTextureAndText* textureAndText;
        QWidget* widget;
        QString name;
        QList<QListWidgetItem*> list = mSelectionList->findItems(QString("*"), Qt::MatchWildcard);
        foreach (QListWidgetItem* item, list)
        {
            widget = mSelectionList->itemWidget(item);
            if (widget)
            {
                textureAndText = static_cast<QtTextureAndText*>(widget);
                name = textureAndText->mBaseName;
                name = name.toLower();
                if (!name.contains(pattern))
                    item->setHidden(true);
            }
        }
    }

    //****************************************************************************/
    void QtExtendedTextureWidget::resetFilter(void)
    {
        QList<QListWidgetItem*> list = mSelectionList->findItems(QString("*"), Qt::MatchWildcard);
        foreach (QListWidgetItem* item, list)
            item->setHidden(false);
    }

    //****************************************************************************/
    void QtExtendedTextureWidget::setDropFilesAllowed(bool allowed)
    {
        mSelectionList->setMouseTracking(allowed);
        mSelectionList->setAcceptDrops(allowed);
        mSelectionList->setDropIndicatorShown(allowed);
    }

}
