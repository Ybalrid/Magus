/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#include "ogre2_widget.h"
#include "ogre2_renderman.h"
#include "Compositor/OgreCompositorManager2.h"
#include "OgreRenderSystem.h"
#include "OgreCommon.h"
#include "OgreTimer.h"

namespace Magus
{
    //****************************************************************************/
    QOgreWidget::QOgreWidget(QWidget* parent) :
        QWidget(parent),
        mRoot(0),
        mOgreRenderWindow(0),
        mCamera(0),
        mCameraManager(0),
        mTimeSinceLastFrame (0.0f),
        mEntity(0),
        mSceneCreated(false),
        mSystemInitialized(false)
    {
        setAttribute(Qt::WA_OpaquePaintEvent);
        setAttribute(Qt::WA_PaintOnScreen);
        setMinimumSize(240,240);
        resize(800,600);
        setFocusPolicy(Qt::StrongFocus);
        setMouseTracking(true);
        mBackground = Ogre::ColourValue(0.7f, 0.7f, 1.0f);
        mAbsolute = Ogre::Vector2::ZERO;
        mRelative = Ogre::Vector2::ZERO;
    }

    //****************************************************************************/
    QOgreWidget::~QOgreWidget()
    {
    }

    //****************************************************************************/
    HGLRC QOgreWidget::getCurrentGlContext(void)
    {
        #if defined(Q_OS_WIN)
            return wglGetCurrentContext(); // Windows
        #else
            return glXGetCurrentContext(); // Linux
        #endif

        return 0;
    }

    //****************************************************************************/
    void QOgreWidget::createRenderWindow(Magus::OgreManager* ogreManager)
    {
        if (!ogreManager)
            OGRE_EXCEPT(Ogre::Exception::ERR_INVALIDPARAMS, "No Ogre Manager available", "QOgreWidget::createRenderWindow");

        Ogre::Root* root = ogreManager->getOgreRoot();
        if (!root)
            OGRE_EXCEPT(Ogre::Exception::ERR_INVALIDPARAMS, "No Ogre Root available", "QOgreWidget::createRenderWindow");

        // Get rendersystem and assign window handle
        mRoot = root;
        Ogre::RenderSystem* renderSystem = mRoot->getRenderSystem();
        Ogre::NameValuePairList parameters;

        // Reuse the glContext if available
        HGLRC glContext = 0;
        if (ogreManager->isRenderSystemGL())
        {
            parameters["currentGLContext"] = Ogre::String("false");
            glContext = ogreManager->getGlContext();
            if (glContext)
            {
                parameters["externalGLContext"] = Ogre::StringConverter::toString( (size_t)(glContext) );
                parameters["vsync"] = "No";
            }
        }

        #if defined(Q_OS_MAC) || defined(Q_OS_WIN)
            Ogre::String windowHandle = Ogre::StringConverter::toString((size_t)(this->winId()));;
            parameters["externalWindowHandle"] = windowHandle;
            parameters["parentWindowHandle"] = windowHandle;
        #else
            Ogre::String windowHandle = Ogre::StringConverter::toString((unsigned long)(this->winId()));
            parameters["externalWindowHandle"] = windowHandle;
            parameters["parentWindowHandle"] = windowHandle;
        #endif

        #if defined(Q_OS_MAC)
            parameters["macAPI"] = "cocoa";
            parameters["macAPICocoaUseNSView"] = "true";
        #endif

        mOgreRenderWindow = mRoot->createRenderWindow(Ogre::StringConverter::toString(mRoot->getTimer()->getMicroseconds()),
                                                      this->width(),
                                                      this->height(),
                                                      false,
                                                      &parameters);
        mOgreRenderWindow->setVisible(true);

        // Determine whether the GL context can be reused
        if (ogreManager->isRenderSystemGL() && !glContext)
        {
            // Store the glContext in the ogre manager
            glContext = getCurrentGlContext();
            ogreManager->setGlContext(glContext);
        }

        // Create scene manager
        const size_t numThreads = std::max<int>(1, Ogre::PlatformInformation::getNumLogicalCores());
        Ogre::InstancingThreadedCullingMethod threadedCullingMethod = (numThreads > 1) ? Ogre::INSTANCING_CULLING_THREADED : Ogre::INSTANCING_CULLING_SINGLETHREAD;
        mSceneManager = mRoot->createSceneManager(Ogre::ST_GENERIC, numThreads, threadedCullingMethod);
        mSceneManager->setShadowDirectionalLightExtrusionDistance( 500.0f );
        mSceneManager->setShadowFarDistance( 500.0f );

        // Create camera
        mCamera = mSceneManager->createCamera("MainCamera");
        mCamera->setAspectRatio(Ogre::Real(mOgreRenderWindow->getWidth()) / Ogre::Real(mOgreRenderWindow->getHeight()));
        mCameraManager = new CameraMan(mCamera);

        // Create the compositor
        createCompositor();
    }

    //****************************************************************************/
    void QOgreWidget::createScene()
    {
        // create our model, give it the shader material, and place it at the origin
        mEntity = mSceneManager->createEntity("ogrehead.mesh", Ogre::ResourceGroupManager::AUTODETECT_RESOURCE_GROUP_NAME);
        Ogre::SceneNode* node = mSceneManager->getRootSceneNode()->createChildSceneNode();
        node->attachObject(mEntity);
        mCameraManager->setTarget(node);

        // Create light
        Ogre::Light *light = mSceneManager->createLight();
        Ogre::SceneNode *lightNode = mSceneManager->getRootSceneNode()->createChildSceneNode();
        lightNode->attachObject( light );
        light->setPowerScale( Ogre::Math::PI ); //Since we don't do HDR, counter the PBS' division by PI
        light->setType( Ogre::Light::LT_DIRECTIONAL );
        light->setDirection( Ogre::Vector3( -1, -1, -1 ).normalisedCopy() );

        mSystemInitialized = true;
    }

    //****************************************************************************/
    void QOgreWidget::createCompositor()
    {
        Ogre::CompositorManager2* compositorManager = mRoot->getCompositorManager2();
        const Ogre::String workspaceName = Ogre::StringConverter::toString(mRoot->getTimer()->getMicroseconds());
        const Ogre::IdString workspaceNameHash = workspaceName;
        compositorManager->createBasicWorkspaceDef(workspaceName, mBackground);
        compositorManager->addWorkspace(mSceneManager, mOgreRenderWindow, mCamera, workspaceNameHash, true);
    }

    //****************************************************************************/
    void QOgreWidget::updateOgre(Ogre::Real timeSinceLastFrame)
    {
        if (!mSceneCreated)
        {
            createScene();
            mSceneCreated = true;
        }

        mTimeSinceLastFrame = timeSinceLastFrame;
        repaint();
        if (this->size() != this->parentWidget()->size())
            resize(this->parentWidget()->size());
    }

    //-------------------------------------------------------------------------------------
    QPaintEngine* QOgreWidget::paintEngine() const
    {
        // We don't want another paint engine to get in the way for our Ogre based paint engine.
        // So we return nothing.
        return 0;
    }

    //-------------------------------------------------------------------------------------
    void QOgreWidget::paintEvent(QPaintEvent *e)
    {
    }

    //-------------------------------------------------------------------------------------
    void QOgreWidget::resizeEvent(QResizeEvent *e)
    {
        if(e->isAccepted())
        {
            const QSize &newSize = e->size();
            if(mCamera && mOgreRenderWindow)
            {
                mOgreRenderWindow->resize(newSize.width(), newSize.height());
                mOgreRenderWindow->windowMovedOrResized();
                Ogre::Real aspectRatio = Ogre::Real(newSize.width()) / Ogre::Real(newSize.height());
                mCamera->setAspectRatio(aspectRatio);
            }
        }
    }

    //****************************************************************************/
    void QOgreWidget::keyPressEvent(QKeyEvent * ev)
    {
        if(mSystemInitialized)
            mCameraManager->injectKeyDown(ev);
    }

    //****************************************************************************/
    void QOgreWidget::keyReleaseEvent(QKeyEvent * ev)
    {
        if(mSystemInitialized)
            mCameraManager->injectKeyUp(ev);
    }

    //****************************************************************************/
    void QOgreWidget::mouseMoveEvent( QMouseEvent* e )
    {
        if(mSystemInitialized)
        {
            Ogre::Vector2 oldPos = mAbsolute;
            mAbsolute = Ogre::Vector2(e->pos().x(), e->pos().y());
            mRelative = mAbsolute - oldPos;
            mCameraManager->injectMouseMove(mRelative);
        }
    }

    //****************************************************************************/
    void QOgreWidget::wheelEvent(QWheelEvent *e)
    {
        if(mSystemInitialized)
            mCameraManager->injectMouseWheel(e);
    }

    //****************************************************************************/
    void QOgreWidget::mousePressEvent( QMouseEvent* e )
    {
        if(mSystemInitialized)
            mCameraManager->injectMouseDown(e);
    }

    //****************************************************************************/
    void QOgreWidget::mouseReleaseEvent( QMouseEvent* e )
    {
        if(mSystemInitialized)
            mCameraManager->injectMouseUp(e);
    }
}
//-------------------------------------------------------------------------------------
