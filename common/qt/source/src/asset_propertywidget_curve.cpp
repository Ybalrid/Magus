/****************************************************************************
**
** Copyright (C) 2014
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QVBoxLayout>
#include <QMessageBox>
#include <QLabel>
#include <QFileInfo>
#include "asset_propertywidget_curve.h"

namespace Magus
{
    //****************************************************************************/
    QtCurveProperty::QtCurveProperty(const QString& title, QWidget* parent) : QtProperty(parent)
    {
        QString mIconDir = QString("");
        mCurveDialog = 0;
        QPixmap mCurvePixmap;

        QVBoxLayout* mainLayout = new QVBoxLayout;
        QHBoxLayout* horizontalLayout = new QHBoxLayout;
        QHBoxLayout* curveAndButtonLayout = new QHBoxLayout;
        mainLayout->setContentsMargins(5, 0, 5, 0);
        QLabel* label = new QLabel(title);
        mCurveLabel = new QLabel();
        mCurveLabel->setStyleSheet(QString("border: 1px solid #000000;"));
        mCurveSize.setWidth(128);
        mCurveSize.setHeight(64);
        mCurveLabel->setMaximumWidth(mCurveSize.width());

        mDialogButton = new QPushButton(QString(" .. "));
        connect(mDialogButton, SIGNAL(clicked(bool)), this, SLOT(dialogButtonClicked(void)));

        // Layout
        curveAndButtonLayout->addWidget(mCurveLabel, 1);
        curveAndButtonLayout->addWidget(mDialogButton, 1);
        curveAndButtonLayout->addStretch(9);
        horizontalLayout->addWidget(label, 1);
        horizontalLayout->addLayout(curveAndButtonLayout, 2);
        mainLayout->addLayout(horizontalLayout);
        setLayout(mainLayout);
        mType = CURVE;
    }

    //****************************************************************************/
    void QtCurveProperty::setIconDir(const QString& iconDir)
    {
        mIconDir = iconDir;

        // The image in this property is static
        mCurvePixmap = QPixmap(mIconDir + QString("curve.png")).scaled(mCurveSize.width(),
                                                mCurveSize.height(),
                                                Qt::KeepAspectRatio,
                                                Qt::SmoothTransformation);
        mCurveLabel->setPixmap(mCurvePixmap);
        mCurveLabel->setMaximumWidth(mCurveSize.width());
        mCurveLabel->setMaximumHeight(mCurveSize.height());
    }

    //****************************************************************************/
    void QtCurveProperty::setCurveSize(const QSize& size)
    {
        mCurveSize = size;
    }

    //****************************************************************************/
    void QtCurveProperty::dialogButtonClicked(void)
    {
        if (!mCurveDialog)
        {
            mCurveDialog = new QtCurveDialog (mIconDir, this);
        }
        if (mCurveDialog->exec())
        {
            // Set a copy of the curve in the property
            mCurvePixmap = mCurveDialog->mCurvePixmap.scaled(mCurveSize.width(),
                                                             mCurveSize.height(),
                                                             Qt::KeepAspectRatio,
                                                             Qt::SmoothTransformation);;
            mCurveLabel->setPixmap(mCurvePixmap);

            // TODO: Copy points from dialog to internal vector
        }
    }

    //****************************************************************************/
    void QtCurveProperty::propertyValueChanged(void)
    {
        emit valueChanged(this);
    }
}
