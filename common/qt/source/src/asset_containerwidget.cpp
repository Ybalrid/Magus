/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QVBoxLayout>
#include <QMessageBox>
#include <QLabel>
#include <QStyleOption>
#include <QPainter>
#include "asset_containerwidget.h"
#include "asset_propertywidget_checkbox.h"
#include "asset_propertywidget_xyz.h"
#include "asset_propertywidget_xy.h"
#include "asset_propertywidget_string.h"
#include "asset_propertywidget_select.h"
#include "asset_propertywidget_slider.h"
#include "asset_propertywidget_decimal.h"
#include "asset_propertywidget_color.h"
#include "asset_propertywidget_texture.h"
#include "asset_propertywidget_curve.h"
#include "asset_propertywidget_quaternion.h"

namespace Magus
{
    //****************************************************************************/
    QtContainerWidget::QtContainerWidget(const QString& title,
                                         bool line,
                                         QWidget* parent) : QWidget(parent), mContainerId(-1)
    {
        // Main layout
        setStyleSheet(QString("margin: 0px;"
                              "padding: 0px;"
                              "border: 0px solid #353535;"));
        mFileNameIconCollapsed = QString ("");
        mFileNameIconExpand = QString ("");
        mTitleFileNameIcon = QString ("");
        mFileNameAction1Icon = QString ("");
        mFileNameAction2Icon = QString ("");
        mHeaderTitleIconLabel = new QLabel;
        mHeaderTitleIconLabel->setStyleSheet(QString("background: transparent;"
                                                     "border: 0px solid #353535;"));
        mExpanded = false;
        mHeaderIconCollapsedExpandLabel = new QLabel;
        mHeaderAction1IconLabel = new QtClickableLabel();
        mHeaderAction1IconLabel->setVisible(false);
        mHeaderAction2IconLabel = new QtClickableLabel();
        mHeaderAction2IconLabel->setVisible(false);
        mHeaderIconSize = QSize(CONTAINER_DEFAULT_ICON_DIMENSION, CONTAINER_DEFAULT_ICON_DIMENSION);
        mHeaderTitleIconLabel->setMinimumSize(mHeaderIconSize);
        mHeaderTitleIconLabel->setVisible(false);
        mHeaderAction1IconLabel->setMinimumSize(mHeaderIconSize);
        mHeaderAction2IconLabel->setMinimumSize(mHeaderIconSize);
        QVBoxLayout* mainLayout = new QVBoxLayout;
        QVBoxLayout* mainFrameLayout = new QVBoxLayout;
        mHeaderLayout = new QHBoxLayout;
        mHeaderLeftLayout = new QHBoxLayout;
        mHeaderRightLayout = new QHBoxLayout;
        setContentsMargins(0, 0, 0, 0);
        mainLayout->setContentsMargins(0, 0, 0, 0);
        mainFrameLayout->setContentsMargins(0, 0, 0, 0);
        mHeaderLayout->setContentsMargins(0, 0, 0, 0);
        QFrame* frame = new QFrame;
        if (line)
        {
            frame->setStyleSheet("margin: 0px;"
                                 "padding: 0px;"
                                 "border: 1px solid black;");
        }
        else
        {
            frame->setStyleSheet("margin: 0px;"
                                 "padding: 0px;"
                                 "border: 0px solid black;");
        }

        // Header
        mHeader = new QtClickableFrame();
        mHeader->setStyleSheet("border: 0px solid black;");
        mHeader->setFrameStyle(QFrame::NoFrame);
        mHeader->setFrameShadow(QFrame::Plain);
        mHeader->setFrameShape(QFrame::NoFrame);
        mHeader->setMaximumHeight(CONTAINER_HEADER_HEIGHT);
        mHeader->setMinimumHeight(CONTAINER_HEADER_HEIGHT);
        mHeader->setAutoFillBackground(true);

        // Header: Title
        mHeaderTitleLabel = new QLabel(title);

        // Header: Layout
        mHeaderLeftLayout->addWidget(mHeaderIconCollapsedExpandLabel, 0, Qt::AlignLeft);
        mHeaderLeftLayout->addWidget(mHeaderTitleIconLabel, 0, Qt::AlignLeft);
        mHeaderLeftLayout->addWidget(mHeaderTitleLabel, 0, Qt::AlignLeft);
        mHeaderLeftLayout->addStretch(1000);
        mHeaderRightLayout->addStretch(1000);
        mHeaderRightLayout->addWidget(mHeaderAction1IconLabel, 0, Qt::AlignRight);
        mHeaderRightLayout->addWidget(mHeaderAction2IconLabel, 0, Qt::AlignRight);
        mHeaderLayout->addLayout(mHeaderLeftLayout);
        mHeaderLayout->addLayout(mHeaderRightLayout);
        mHeader->setLayout(mHeaderLayout);

        // Body
        mBodyMainLayout = new QVBoxLayout;
        mBodyMainLayout->setContentsMargins(0, 0, 0, 0);
        mBody = new QFrame;
        mBody->setStyleSheet("border: 0px solid black;");
        mBody->setFrameStyle(QFrame::NoFrame);
        mBody->setFrameShadow(QFrame::Plain);
        mBody->setFrameShape(QFrame::NoFrame);
        mBody->setAutoFillBackground(true);
        mBody->setVisible(mExpanded);
        mBody->setLayout(mBodyMainLayout);

        // Add header to the main layout
        mainFrameLayout->addWidget(mHeader);
        mainFrameLayout->addWidget(mBody);
        frame->setLayout(mainFrameLayout);
        mainLayout->addWidget(frame);
        setLayout(mainLayout);
        mHeader->showMaximized();
        mBody->showMaximized();

        // Signal/slots
        connect(mHeader, SIGNAL(clicked()), this, SLOT(headerClicked(void)));
    }

    //****************************************************************************/
    void QtContainerWidget::setHeaderHidden(bool hidden)
    {
        mHeader->setHidden(hidden);
    }

    //****************************************************************************/
    void QtContainerWidget::setTitleIcon(const QString& fileNameIcon)
    {
        mTitleFileNameIcon = fileNameIcon;
        mHeaderTitleIconLabel->setPixmap(QPixmap(fileNameIcon).scaled(
                                        mHeaderIconSize.width(),
                                        mHeaderIconSize.height(),
                                        Qt::KeepAspectRatio,
                                        Qt::SmoothTransformation));
        mHeaderTitleIconLabel->setVisible(true);
    }

    //****************************************************************************/
    void QtContainerWidget::setAction1Icon(const QString& fileNameIcon)
    {
        mFileNameAction1Icon = fileNameIcon;
        mHeaderAction1IconPixmap = QPixmap(fileNameIcon).scaled(mHeaderIconSize.width(),
                                                             mHeaderIconSize.height(),
                                                             Qt::KeepAspectRatio,
                                                             Qt::SmoothTransformation);

        mHeaderAction1IconLabel->setPixmap(mHeaderAction1IconPixmap);
        mHeaderAction1IconLabel->setVisible(true);
        connect(mHeaderAction1IconLabel, SIGNAL(clicked(void)), this, SLOT(action1IconClicked(void)));
    }

    //****************************************************************************/
    void QtContainerWidget::setAction2Icon(const QString& fileNameIcon)
    {
        mFileNameAction2Icon = fileNameIcon;
        mHeaderAction2IconPixmap = QPixmap(fileNameIcon).scaled(mHeaderIconSize.width(),
                                                             mHeaderIconSize.height(),
                                                             Qt::KeepAspectRatio,
                                                             Qt::SmoothTransformation);

        mHeaderAction2IconLabel->setPixmap(mHeaderAction2IconPixmap);
        mHeaderAction2IconLabel->setVisible(true);
        connect(mHeaderAction2IconLabel, SIGNAL(clicked(void)), this, SLOT(action2IconClicked(void)));
    }

    //****************************************************************************/
    void QtContainerWidget::headerClicked(void)
    {
        if (!mBody)
            return;

        mExpanded = !mExpanded;
        mBody->setVisible(mExpanded);
        updateCollapseExpandIcon();
    }

    //****************************************************************************/
    void QtContainerWidget::action1IconClicked(void)
    {
        // Used when the icon is clicked on this container itself
        emit action1Clicked(this);
    }

    //****************************************************************************/
    void QtContainerWidget::action1IconClicked(QtContainerWidget* containerWidget)
    {
        // Used when the icon is clicked on a subcontainer
        emit action1Clicked(containerWidget);
    }

    //****************************************************************************/
    void QtContainerWidget::action2IconClicked(void)
    {
        // Used when the icon is clicked on this container itself
        emit action2Clicked(this);
    }

    //****************************************************************************/
    void QtContainerWidget::action2IconClicked(QtContainerWidget* containerWidget)
    {
        // Used when the icon is clicked on a subcontainer
        emit action2Clicked(containerWidget);
    }

    //****************************************************************************/
    void QtContainerWidget::propertyValueChanged(QtProperty* property)
    {
        //QMessageBox::information(0, "QtContainerWidget::propertyValueChanged1", QVariant(property->mPropertyId).toString()); // Test
        emit valueChanged(property->mPropertyId);
        emit valueChanged(property);
    }

    //****************************************************************************/
    void QtContainerWidget::expand(void)
    {
        if (!mBody)
            return;

        mExpanded = true;
        mBody->setVisible(mExpanded);
        updateCollapseExpandIcon();
    }

    //****************************************************************************/
    void QtContainerWidget::collapse(void)
    {
        if (!mBody)
            return;

        mExpanded = false;
        mBody->setVisible(mExpanded);
        updateCollapseExpandIcon();
    }

    //****************************************************************************/
    void QtContainerWidget::setFileNameIconCollapsed(const QString& fileNameIcon)
    {
        mFileNameIconCollapsed = fileNameIcon;
        mHeaderCollapsedPixmap = QPixmap(fileNameIcon).scaled(mHeaderIconSize.width(),
                                                              mHeaderIconSize.height(),
                                                              Qt::KeepAspectRatio,
                                                              Qt::SmoothTransformation);
        updateCollapseExpandIcon();
    }

    //****************************************************************************/
    void QtContainerWidget::setFileNameIconExpanded(const QString& fileNameIcon)
    {
        mFileNameIconExpand = fileNameIcon;
        mHeaderExpandPixmap = QPixmap(fileNameIcon).scaled(mHeaderIconSize.width(),
                                                           mHeaderIconSize.height(),
                                                           Qt::KeepAspectRatio,
                                                           Qt::SmoothTransformation);
        updateCollapseExpandIcon();
    }

    //****************************************************************************/
    void QtContainerWidget::updateCollapseExpandIcon(void)
    {
        if (!mBody)
            return;

        if (mExpanded)
        {
            mHeaderIconCollapsedExpandLabel->setPixmap(mHeaderExpandPixmap);
        }
        else
        {
            mHeaderIconCollapsedExpandLabel->setPixmap(mHeaderCollapsedPixmap);
        }
    }

    //****************************************************************************/
    QtContainerWidget* QtContainerWidget::createContainer (int containerId,
                                                           QString title,
                                                           bool line)
    {
        // First check if the container already exists
        if (mQtWidgetMap.contains(containerId))
            return 0;

        // Create the container
        QtContainerWidget* containerWidget = new QtContainerWidget(title, line);
        containerWidget->mContainerId = containerId;
        containerWidget->setFileNameIconCollapsed(mFileNameIconCollapsed);
        containerWidget->setFileNameIconExpanded(mFileNameIconExpand);
        mQtWidgetMap[containerId] = containerWidget;
        rebuildWidgetContent();
        connect(containerWidget, SIGNAL(action1Clicked(QtContainerWidget*)), this, SLOT(action1IconClicked(QtContainerWidget*)));
        connect(containerWidget, SIGNAL(action2Clicked(QtContainerWidget*)), this, SLOT(action2IconClicked(QtContainerWidget*)));
        connect(containerWidget, SIGNAL(valueChanged(QtProperty*)), this, SLOT(propertyValueChanged(QtProperty*)));
        return containerWidget;
    }

    //****************************************************************************/
    QtProperty* QtContainerWidget::createProperty (int propertyId,
                                                   QString title,
                                                   QtProperty::PropertyType type,
                                                   bool immutable)
    {
        // First check if the property already exists
        if (mQtWidgetMap.contains(propertyId))
            return 0;

        // Create the property
        QtProperty* property = 0;
        switch (type)
        {
            case QtProperty::DECIMAL:
                property = new QtDecimalProperty(title);
            break;

            case QtProperty::STRING:
                property = new QtStringProperty(title);
            break;

            case QtProperty::CHECKBOX:
                property = new QtCheckBoxProperty(title);
            break;

            case QtProperty::XYZ:
                property = new QtXYZProperty(title);
            break;

            case QtProperty::XY:
                property = new QtXYProperty(title);
            break;

            case QtProperty::SELECT:
                property = new QtSelectProperty(title);
            break;

            case QtProperty::SLIDER:
                property = new QtSliderProperty(title);
            break;

            case QtProperty::COLOR:
                property = new QtColorProperty(title);
            break;

            case QtProperty::TEXTURE:
                property = new QtTextureProperty(title);
            break;

            case QtProperty::CURVE:
                property = new QtCurveProperty(title);
            break;

            case QtProperty::QUATERNION:
                property = new QtQuaternionProperty(title);
            break;
        }

        if (property)
        {
            mQtWidgetMap[propertyId] = property;
            property->mPropertyId = propertyId;
            property->mParentContainerId = mContainerId;
            property->setEnabled(!immutable); // Changing the property is not allowed
            connect(property, SIGNAL(valueChanged(QtProperty*)), this, SLOT(propertyValueChanged(QtProperty*)));
            rebuildWidgetContent();
        }

        return property;
    }

    //****************************************************************************/
    QtProperty* QtContainerWidget::getPropertyWidget (int propertyId)
    {
        QWidget* widget = mQtWidgetMap.value(propertyId);
        if (widget)
        {
            // The propertyId MUST refer to a QtProperty. The mQtWidgetMap may also contain QtContainerWidgets
            // No explicit check is performed
            return static_cast<QtProperty*>(mQtWidgetMap.value(propertyId));
        }
        return 0;
    }

    //****************************************************************************/
    void QtContainerWidget::setTitleBold(bool bold)
    {
        QFont font = mHeaderTitleLabel->font();
        font.setBold(bold);
        mHeaderTitleLabel->setFont(font);
    }

    //****************************************************************************/
    void QtContainerWidget::rebuildWidgetContent(void)
    {
        if (!mBodyMainLayout)
            return;

        delete mBodyMainLayout;
        mBodyMainLayout = new QVBoxLayout;
        mBodyMainLayout->setContentsMargins(0, 0, 0, 0);

        // Iterate
        QMap<int, QWidget*>::iterator i;
        for (i = mQtWidgetMap.begin(); i != mQtWidgetMap.end(); ++i)
        {
            mBodyMainLayout->addWidget(i.value(), 1, Qt::AlignTop);
        }

        mBodyMainLayout->addStretch(1000);
        mBody->setLayout(mBodyMainLayout);
    }

}

