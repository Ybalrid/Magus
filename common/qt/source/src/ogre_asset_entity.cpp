/****************************************************************************
**
** Copyright (C) 2014
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QMessageBox>
#include "ogre_asset_entity.h"
#include "asset_propertywidget_xyz.h"
#include "asset_propertywidget_string.h"
#include "asset_propertywidget_checkbox.h"
#include "asset_propertywidget_select.h"
#include "asset_propertywidget_slider.h"
#include "asset_propertywidget_decimal.h"

namespace Magus
{
    //****************************************************************************/
    QtOgreAssetEntity::QtOgreAssetEntity(const QString& iconDir, QWidget* parent) : QWidget(parent)
    {
        mOgreEntity = 0;

        // Create QtAssetWidget
        QVBoxLayout* mainLayout = new QVBoxLayout;
        mainLayout->setContentsMargins(0, 0, 0, 0);
        mAssetWidget = new QtAssetWidget(QString("Entity"),
                                         iconDir + QString("npc.png"),
                                         this);
        mAssetWidget->setFileNameIconCollapsed(iconDir + QString("collapse.png"));
        mAssetWidget->setFileNameIconExpanded(iconDir + QString("expand.png"));
        mAssetWidget->setHeaderTitleBold();
        connect(mAssetWidget, SIGNAL(containerAction2Clicked(QtContainerWidget*)), this, SLOT(containerAction2Clicked(QtContainerWidget*)));
        connect(mAssetWidget, SIGNAL(valueChanged(QtProperty*)), this, SLOT(propertyValueChanged(QtProperty*)));

        // Create container - General
        QtContainerWidget* container = 0;
        container = mAssetWidget->createContainer(CONTAINER_GENERAL, QString("General"));
        container->setTitleBold();
        container->setTitleIcon(iconDir + QString("cube_bold.png"));
        mAssetWidget->createProperty(CONTAINER_GENERAL, ENTITY_NAME, QString("Name"), QtProperty::STRING, true);
        mAssetWidget->createProperty(CONTAINER_GENERAL, ENTITY_MESH_NAME, QString("Mesh name"), QtProperty::STRING, true);

        // Create container - Transform
        container = mAssetWidget->createContainer(CONTAINER_TRANSFORM, QString("Transform"));
        container->setAction2Icon(iconDir + QString("cog.png"));
        container->setTitleIcon(iconDir + QString("axis_bold.png"));
        container->setTitleBold();
        mAssetWidget->createProperty(CONTAINER_TRANSFORM, ENTITY_POSITION_PROPERTY, QString("Position"), QtProperty::XYZ);
        mAssetWidget->createProperty(CONTAINER_TRANSFORM, ENTITY_ROTATION_PROPERTY, QString("Rotation"), QtProperty::XYZ);
        mAssetWidget->createProperty(CONTAINER_TRANSFORM, ENTITY_SCALE_PROPERTY, QString("Scale"), QtProperty::XYZ);

        // Create container - Rendering
        container = mAssetWidget->createContainer(CONTAINER_RENDERING, QString("Rendering"));
        container->setTitleBold();
        container->setTitleIcon(iconDir + QString("rendering_bold.png"));
        container->setAction2Icon(iconDir + QString("cog.png"));
        mAssetWidget->createProperty(CONTAINER_RENDERING, ENTITY_QUEUE_GROUP, QString("Render queue group"), QtProperty::DECIMAL);
        mAssetWidget->createProperty(CONTAINER_RENDERING, ENTITY_RENDERING_DISTANCE, QString("Rendering distance"), QtProperty::DECIMAL);

        // Create container - Shadows
        container = mAssetWidget->createContainer(CONTAINER_SHADOWS, QString("Shadows"));
        container->setTitleBold();
        container->setTitleIcon(iconDir + QString("shadow_bold.png"));
        mAssetWidget->createProperty(CONTAINER_SHADOWS, ENTITY_CAST_SHADOWS, QString("Cast shadows"), QtProperty::CHECKBOX);
        mAssetWidget->createProperty(CONTAINER_SHADOWS, ENTITY_RECEIVE_SHADOWS, QString("Receive shadows"), QtProperty::CHECKBOX, true);

        // Create container - Animation
        container = mAssetWidget->createContainer(CONTAINER_ANIMATION, QString("Animation"));
        container->setTitleBold();
        container->setTitleIcon(iconDir + QString("animation_bold.png"));
        mAssetWidget->createProperty(CONTAINER_ANIMATION, ENTITY_HAS_SKELETON, QString("Skeleton"), QtProperty::CHECKBOX, true);
        mAssetWidget->createProperty(CONTAINER_ANIMATION, ENTITY_HAS_VERTEX_ANIMATION, QString("Vertex animation"), QtProperty::CHECKBOX, true);
        mAssetWidget->createProperty(CONTAINER_ANIMATION, ENTITY_HARDWARE_ANIMATION, QString("Hardware animation"), QtProperty::CHECKBOX, true);

        // Create container - Subentities themselves can only be added as soon as the entity has been 'binded'
        mSubEntityContainer = mAssetWidget->createContainer(CONTAINER_SUBENTITIES, QString("SubEntities"));
        mSubEntityContainer->setTitleBold();
        mSubEntityContainer->setTitleIcon(iconDir + QString("npc_bold.png"));

        // Layout
        mainLayout->addWidget(mAssetWidget);
        setLayout(mainLayout);
    }

    //****************************************************************************/
    QtOgreAssetEntity::~QtOgreAssetEntity(void)
    {
    }

    //****************************************************************************/
    void QtOgreAssetEntity::expandAll(void)
    {
        if (mAssetWidget)
            mAssetWidget->expandAllContainers();
    }

    //****************************************************************************/
    void QtOgreAssetEntity::collapseAll(void)
    {
        if (mAssetWidget)
            mAssetWidget->collapseAllContainers();
    }

    //****************************************************************************/
    void QtOgreAssetEntity::bindObject (Ogre::Entity* entity)
    {
        mOgreEntity = entity; // Allow null value entity
        if (!entity)
            return;

        // Set the properties, based on the entity settings
        // Name
        QtStringProperty* stringProperty = static_cast<QtStringProperty*>(mAssetWidget->getPropertyWidget(ENTITY_NAME));
        const char* ch = entity->getName().c_str();
        stringProperty->setString(QString(ch));

        Ogre::MeshPtr mesh = entity->getMesh();
        if(!mesh.isNull())
        {
            // Mesh name
            ch = mesh->getName().c_str();
            stringProperty->setString(QString(ch));
        }

        Ogre::Node* node = entity->getParentNode();
        if (entity->isAttached() && node)
        {
            // Position
            QtXYZProperty* xyzProperty = static_cast<QtXYZProperty*>(mAssetWidget->getPropertyWidget(ENTITY_POSITION_PROPERTY));
            Ogre::Vector3 pos = node->getPosition();
            xyzProperty->setXYZ(pos.x, pos.y, pos.z);

            // Rotation
            xyzProperty = static_cast<QtXYZProperty*>(mAssetWidget->getPropertyWidget(ENTITY_ROTATION_PROPERTY));
            Ogre::Quaternion rot = node->getOrientation();
            xyzProperty->setXYZ(rot.getPitch().valueDegrees(), rot.getYaw().valueDegrees(), rot.getRoll().valueDegrees());

            // Scale
            xyzProperty = static_cast<QtXYZProperty*>(mAssetWidget->getPropertyWidget(ENTITY_SCALE_PROPERTY));
            Ogre::Vector3 scale = node->getScale();
            xyzProperty->setXYZ(scale.x, scale.y, scale.z);
        }

        // Render queue group
        QtDecimalProperty* decimalProperty = static_cast<QtDecimalProperty*>(mAssetWidget->getPropertyWidget(ENTITY_QUEUE_GROUP));
        decimalProperty->setValue(entity->getRenderQueueGroup());

        // Rendering distance
        decimalProperty = static_cast<QtDecimalProperty*>(mAssetWidget->getPropertyWidget(ENTITY_RENDERING_DISTANCE));
        decimalProperty->setValue(entity->getRenderingDistance());

        // Cast shadows
        QtCheckBoxProperty* checkboxProperty = static_cast<QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(ENTITY_CAST_SHADOWS));
        checkboxProperty->setValue(entity->getCastShadows());

        // Receive shadows
        checkboxProperty = static_cast<QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(ENTITY_RECEIVE_SHADOWS));
        checkboxProperty->setValue(entity->getReceivesShadows());

        // Has skeleton
        checkboxProperty = static_cast<QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(ENTITY_HAS_SKELETON));
        checkboxProperty->setValue(entity->hasSkeleton());

        // Has vertex animation
        checkboxProperty = static_cast<QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(ENTITY_HAS_VERTEX_ANIMATION));
        checkboxProperty->setValue(entity->hasVertexAnimation());

        // Hardware animation enabled
        checkboxProperty = static_cast<QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(ENTITY_HARDWARE_ANIMATION));
        checkboxProperty->setValue(entity->isHardwareAnimationEnabled());

        // Create the subentities
        unsigned int numSubEntities = entity->getNumSubEntities();
        QtContainerWidget* subContainer;
        stringProperty;
        Ogre::SubEntity* subEntity;
        for (unsigned int i = 0; i < numSubEntities; ++i)
        {
            int subContainerId = i + 30;
            int propertyId = i + SUBENTITY_MATERIAL_NAME;
            subEntity = entity->getSubEntity(i);
            subContainer = mSubEntityContainer->createContainer(subContainerId, QString("SubEntity ") + QVariant(i).toString());
            stringProperty = static_cast<QtStringProperty*>(subContainer->createProperty(propertyId, QString("Material name"), QtProperty::STRING));
            ch = subEntity->getMaterialName().c_str();
            stringProperty->setString(QString(ch));
            stringProperty->mUserData = subEntity;
        }
    }

    //****************************************************************************/
    void QtOgreAssetEntity::containerAction2Clicked (QtContainerWidget* container)
    {
        if (!container)
            return;

        QtXYZProperty* xyzProperty = 0;
        QtDecimalProperty* decimalProperty = 0;
        switch (container->mContainerId)
        {
            case CONTAINER_RENDERING:
            {
                // Reset rendering properties
                decimalProperty = static_cast<QtDecimalProperty*>(container->getPropertyWidget(ENTITY_QUEUE_GROUP));
                decimalProperty->setValue(50.0f);
                propertyValueChanged(decimalProperty);

                decimalProperty = static_cast<QtDecimalProperty*>(container->getPropertyWidget(ENTITY_RENDERING_DISTANCE));
                decimalProperty->setValue(0.0f);
                propertyValueChanged(decimalProperty);
            }
            break;

            case CONTAINER_TRANSFORM:
            {
                // Reset transformations
                xyzProperty = static_cast<QtXYZProperty*>(container->getPropertyWidget(ENTITY_POSITION_PROPERTY));
                xyzProperty->setXYZ(0.0f, 0.0f, 0.0f);
                propertyValueChanged(xyzProperty);

                xyzProperty = static_cast<QtXYZProperty*>(container->getPropertyWidget(ENTITY_ROTATION_PROPERTY));
                xyzProperty->setXYZ(0.0f, 0.0f, 0.0f);
                propertyValueChanged(xyzProperty);

                xyzProperty = static_cast<QtXYZProperty*>(container->getPropertyWidget(ENTITY_SCALE_PROPERTY));
                xyzProperty->setXYZ(1.0f, 1.0f, 1.0f);
                propertyValueChanged(xyzProperty);
            }
            break;
        }
    }

    //****************************************************************************/
    void QtOgreAssetEntity::propertyValueChanged(QtProperty* property)
    {
        if (!mOgreEntity || !property)
            return;

        QtStringProperty* stringProperty = 0;
        if (property->mPropertyId >= SUBENTITY_MATERIAL_NAME && property->mPropertyId <= SUBENTITY_MAX_MATERIAL_NAME)
        {
            stringProperty = static_cast<QtStringProperty*>(property);
            QString str = stringProperty->getString();
            Ogre::SubEntity* subEntity = mOgreEntity->getSubEntity(property->mPropertyId - SUBENTITY_MATERIAL_NAME);
            if (subEntity)
            {
                Ogre::String materialName = str.toStdString();
                subEntity->setMaterialName(materialName);
            }
        }
        else
        {
            QtXYZProperty* xyzProperty = 0;
            QtDecimalProperty* decimalProperty = 0;
            QtCheckBoxProperty* checkboxProperty = 0;
            switch (property->mPropertyId)
            {
                case ENTITY_POSITION_PROPERTY:
                {
                    xyzProperty = static_cast<QtXYZProperty*>(property);
                    Ogre::Node* node = mOgreEntity->getParentNode();
                    if (mOgreEntity->isAttached() && node)
                        node->setPosition(xyzProperty->getX(), xyzProperty->getY(), xyzProperty->getZ());
                }
                break;

                case ENTITY_ROTATION_PROPERTY:
                {
                    xyzProperty = static_cast<QtXYZProperty*>(property);
                    Ogre::Node* node = mOgreEntity->getParentNode();
                    if (mOgreEntity->isAttached() && node)
                    {
                        node->setOrientation(1.0f, xyzProperty->getX(), xyzProperty->getY(), xyzProperty->getZ());
                    }
                }
                break;

                case ENTITY_SCALE_PROPERTY:
                {
                    xyzProperty = static_cast<QtXYZProperty*>(property);
                    Ogre::Node* node = mOgreEntity->getParentNode();
                    if (mOgreEntity->isAttached() && node)
                        node->setScale(xyzProperty->getX(), xyzProperty->getY(), xyzProperty->getZ());
                }
                break;

                case ENTITY_QUEUE_GROUP:
                {
                    decimalProperty = static_cast<QtDecimalProperty*>(property);
                    mOgreEntity->setRenderQueueGroup(decimalProperty->getValue());
                }
                break;

                case ENTITY_RENDERING_DISTANCE:
                {
                    decimalProperty = static_cast<QtDecimalProperty*>(property);
                    mOgreEntity->setRenderingDistance(decimalProperty->getValue());
                }
                break;

                case ENTITY_CAST_SHADOWS:
                {
                    checkboxProperty = static_cast<QtCheckBoxProperty*>(property);
                    mOgreEntity->setCastShadows(checkboxProperty->getValue());
                }
                break;
            }
        }
    }
}

