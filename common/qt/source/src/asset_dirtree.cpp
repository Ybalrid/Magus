/****************************************************************************
**
** Copyright (C) 2014
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include "asset_dirtree.h"

namespace Magus
{
    //****************************************************************************/
    QtDirTree::QtDirTree(QWidget* parent) : QWidget(parent)
    {
        QVBoxLayout* mainLayout = new QVBoxLayout;
        mModel = new QFileSystemModel();
        mTree = new QTreeView(this);
        mModel->setRootPath(QDir::currentPath());
        mModel->setFilter(QDir::AllDirs | QDir::Dirs | QDir::NoDotAndDotDot | QDir::Drives);
        mTree->setModel(mModel);

        mPerformActionButton = new QPushButton();
        connect(mPerformActionButton, SIGNAL(clicked()), this, SLOT(performAction()));

        mTree->setAnimated(false);

        // Hide all columns except the first one
        QHeaderView* header = mTree->header();
        int columns = header->count();
        for (int i = 1; i < columns; ++i)
            mTree->hideColumn(i);

        mTree->setIndentation(20);
        mainLayout->addWidget(mTree, 99);
        mainLayout->addWidget(mPerformActionButton, 1);
        mTree->expandAll();
        setLayout(mainLayout);
    }

    //****************************************************************************/
    QtDirTree::~QtDirTree(void)
    {
    }

    //****************************************************************************/
    const QString& QtDirTree::getSelectedAbsolutePath(void)
    {
        QModelIndex index = mTree->currentIndex();
        mSelectedAbsolutePath = mModel->filePath(index);
        return mSelectedAbsolutePath;
    }

    //****************************************************************************/
    void QtDirTree::setButtonTitle(const QString& buttonTitle)
    {
        mPerformActionButton->setText(buttonTitle);
    }

    //****************************************************************************/
    void QtDirTree::performAction(void)
    {
        QModelIndex index = mTree->currentIndex();
        mSelectedAbsolutePath = mModel->filePath(index);
        emit directorySelected(mSelectedAbsolutePath);
    }
}
