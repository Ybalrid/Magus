/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include "constants.h"
#include "asset_curve_dialog.h"
#include <QBrush>
#include <QFrame>

namespace Magus
{
    //****************************************************************************/
    QtCurveDialog::QtCurveDialog(const QString& iconDir, QWidget* parent) :
        QDialog (parent)
    {
        mIconDir = iconDir;
        mInnerMain = new QMainWindow();
        QVBoxLayout* mainLayout = new QVBoxLayout;

        mButtonBox = new QDialogButtonBox(QDialogButtonBox::Ok | QDialogButtonBox::Cancel, this);
        connect(mButtonBox, SIGNAL(accepted()), this, SLOT(accept()));
        connect(mButtonBox, SIGNAL(rejected()), this, SLOT(reject()));

        // Perform standard functions
        createActions();
        createMenus();
        createToolBars();

        mScene = new QtCurveGrid();
        mView = new QGraphicsView(this);
        mView->setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
        mView->setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff );
        mView->setScene(mScene);
        mScene->setParentView(mView);
        mView->setRenderHint(QPainter::Antialiasing, true);
        mView->setInteractive(true);
        mView->setMouseTracking(true);
        mainLayout->addWidget(mInnerMain);
        mainLayout->addWidget(mButtonBox);
        mInnerMain->setCentralWidget(mView);
        setMinimumWidth(CURVE_DIALOG_WIDTH);
        setMinimumHeight(CURVE_DIALOG_HEIGHT);
        setWindowTitle(QString("Curve editor"));
        refreshToolbarValues();
        setLayout(mainLayout);
    }

    //****************************************************************************/
    QtCurveDialog::~QtCurveDialog(void)
    {
    }

    //****************************************************************************/
    void QtCurveDialog::addPoint(qreal x, qreal y)
    {
        mScene->addPoint(x, y);
    }

    //****************************************************************************/
    void QtCurveDialog::addPoint(QPointF point)
    {
        mScene->addPoint(point.x(), point.y());
    }

    //****************************************************************************/
    void QtCurveDialog::setPoints(QVector<QPointF>& points)
    {
        QVectorIterator<QPointF> i(points);
        QPointF p;
        while (i.hasNext())
        {
            p = i.next();
            addPoint(p);
        }
    }

    //****************************************************************************/
    QVector<QPointF>& QtCurveDialog::getPoints(void)
    {
        return mScene->getPoints();
    }

    //****************************************************************************/
    void QtCurveDialog::createActions(void)
    {
        mCurveFitHorToolbarAction = new QAction(QIcon(mIconDir + CURVE_ICON_FIT_HORIZONTAL), QString("Fit horizontal"), this);
        connect(mCurveFitHorToolbarAction, SIGNAL(triggered()), this, SLOT(doCurveFitHorToolbarAction()));
        mCurveFitVertToolbarAction = new QAction(QIcon(mIconDir + CURVE_ICON_FIT_VERTICAL), QString("Fit vertical"), this);
        connect(mCurveFitVertToolbarAction, SIGNAL(triggered()), this, SLOT(doCurveFitVertToolbarAction()));
        mCurveZoomInToolbarAction = new QAction(QIcon(mIconDir + CURVE_ICON_ZOOM_IN), QString("Zoom in"), this);
        connect(mCurveZoomInToolbarAction, SIGNAL(triggered()), this, SLOT(doCurveZoomInToolbarAction()));
        mCurveZoomOutToolbarAction = new QAction(QIcon(mIconDir + CURVE_ICON_ZOOM_OUT), QString("Zoom out"), this);
        connect(mCurveZoomOutToolbarAction, SIGNAL(triggered()), this, SLOT(doCurveZoomOutToolbarAction()));
        mCurveEditToolbarAction = new QAction(QIcon(mIconDir + CURVE_ICON_EDIT_ON), QString("Add points"), this);
        connect(mCurveEditToolbarAction, SIGNAL(triggered()), this, SLOT(doCurveEditToolbarAction()));
        mCurveSelectToolbarAction = new QAction(QIcon(mIconDir + CURVE_ICON_SELECT), QString("Select multiple points"), this);
        connect(mCurveSelectToolbarAction, SIGNAL(triggered()), this, SLOT(doCurveSelectToolbarAction()));
        mCurveMoveToolbarAction = new QAction(QIcon(mIconDir + CURVE_ICON_MOVE), QString("Move the graph / move selected points"), this);
        connect(mCurveMoveToolbarAction, SIGNAL(triggered()), this, SLOT(doCurveMoveToolbarAction()));
        mPivotToolbarAction = new QAction(QIcon(mIconDir + CURVE_ICON_PIVOT), QString("Reset zoom and pivot"), this);
        connect(mPivotToolbarAction, SIGNAL(triggered()), this, SLOT(doPivotToolbarAction()));
        mDeletePointsToolbarAction = new QAction(QIcon(mIconDir + CURVE_ICON_DELETE), QString("Delete all points / delete selected points"), this);
        connect(mDeletePointsToolbarAction, SIGNAL(triggered()), this, SLOT(doDeletePointsToolbarAction()));
    }

    //****************************************************************************/
    void QtCurveDialog::createMenus(void)
    {
    }

    //****************************************************************************/
    void QtCurveDialog::createToolBars(void)
    {
        mHToolBar = new QToolBar();
        mHToolBar->setMovable(false);
        mInnerMain->addToolBar(Qt::TopToolBarArea, mHToolBar);
        //mHToolBar->setMinimumHeight(TB_ICON_AND_SPACING);
        mHToolBar->setMinimumHeight(64);
        mHToolBar->setMinimumWidth(CURVE_DIALOG_WIDTH);
        mHToolBar->addAction(mCurveFitHorToolbarAction);
        mHToolBar->addAction(mCurveFitVertToolbarAction);
        mHToolBar->addAction(mCurveZoomInToolbarAction);
        mHToolBar->addAction(mCurveZoomOutToolbarAction);
        mHToolBar->addAction(mCurveEditToolbarAction);
        mHToolBar->addAction(mCurveSelectToolbarAction);
        mHToolBar->addAction(mCurveMoveToolbarAction);
        mHToolBar->addAction(mPivotToolbarAction);

        // Create combobox
        QStringList list;
        list << QString("Straight line") << QString("Straight line sorted") << QString("Cubic unsorted") << QString("Cubic sorted");
        mModel = new QStringListModel(list);
        mLineTypeCombobox = new QComboBox();
        mHToolBar->addWidget(mLineTypeCombobox);
        mLineTypeCombobox->setModel(mModel);
        mLineTypeCombobox->setMaxVisibleItems(4);
        mLineTypeCombobox->setCurrentIndex(0);
        connect(mLineTypeCombobox, SIGNAL(currentIndexChanged(int)), this, SLOT(handleSelectionChanged(int)));

        // Delete 'button'
        mHToolBar->addAction(mDeletePointsToolbarAction);


        // Layout x/y min- and step and decimal slider
        QVBoxLayout* layout = new QVBoxLayout;
        QHBoxLayout* xLayout = new QHBoxLayout;
        QHBoxLayout* yLayout = new QHBoxLayout;

        // X-min
        QHBoxLayout* xMinLayout = new QHBoxLayout;
        QLabel* label = new QLabel(QString("X-min:"));
        mXminEdit = new QLineEdit;
        mXminEdit->setMinimumWidth(CURVE_EDIT_WIDTH);
        mXminEdit->setMinimumHeight(16);
        connect(mXminEdit, SIGNAL(textEdited(QString)), this, SLOT(xMinEditChanged(QString)));
        xMinLayout->addWidget(label, 1);
        xMinLayout->addWidget(mXminEdit, 1);
        xMinLayout->addStretch(10);
        xLayout->addLayout(xMinLayout, 1);

        // X-step
        QHBoxLayout* xStepLayout = new QHBoxLayout;
        label = new QLabel(QString("X-step:"));
        mXstepEdit = new QLineEdit;
        mXstepEdit->setMinimumWidth(CURVE_EDIT_WIDTH);
        mXstepEdit->setMinimumHeight(16);
        connect(mXstepEdit, SIGNAL(textEdited(QString)), this, SLOT(xStepEditChanged(QString)));
        xStepLayout->addWidget(label, 1);
        xStepLayout->addWidget(mXstepEdit, 1);
        xStepLayout->addStretch(10);
        xLayout->addLayout(xStepLayout, 1);

        // X-decimals
        QHBoxLayout* xDecimialLayout = new QHBoxLayout;
        label = new QLabel(QString("X-decimals:"));
        mXdecimalSlider = new QSlider;
        mXdecimalSlider->setMinimumWidth(CURVE_SLIDER_WIDTH);
        mXdecimalSlider->setOrientation(Qt::Horizontal);
        mXdecimalSlider->setRange(0, 8);
        mXdecimalSlider->setTickInterval(1);
        connect(mXdecimalSlider, SIGNAL(valueChanged(int)), this, SLOT(sliderXValueChanged(int)));
        xDecimialLayout->addWidget(label, 1);
        xDecimialLayout->addWidget(mXdecimalSlider, 1);
        xLayout->addLayout(xDecimialLayout, 1);

        // Y-min
        QHBoxLayout* yMinLayout = new QHBoxLayout;
        label = new QLabel(QString("Y-min:"));
        mYminEdit = new QLineEdit;
        mYminEdit->setMinimumWidth(CURVE_EDIT_WIDTH);
        mYminEdit->setMinimumHeight(16);
        connect(mYminEdit, SIGNAL(textEdited(QString)), this, SLOT(yMinEditChanged(QString)));
        yMinLayout->addWidget(label, 1);
        yMinLayout->addWidget(mYminEdit, 1);
        yMinLayout->addStretch(10);
        yLayout->addLayout(yMinLayout, 1);

        // Y-step
        QHBoxLayout* yStepLayout = new QHBoxLayout;
        label = new QLabel(QString("Y-step:"));
        mYstepEdit = new QLineEdit;
        mYstepEdit->setMinimumWidth(CURVE_EDIT_WIDTH);
        mYstepEdit->setMinimumHeight(16);
        connect(mYstepEdit, SIGNAL(textEdited(QString)), this, SLOT(yStepEditChanged(QString)));
        yStepLayout->addWidget(label, 1);
        yStepLayout->addWidget(mYstepEdit, 1);
        yStepLayout->addStretch(10);
        yLayout->addLayout(yStepLayout, 1);

        // Y-decimals
        QHBoxLayout* yDecimialLayout = new QHBoxLayout;
        label = new QLabel(QString("Y-decimals:"));
        mYdecimalSlider = new QSlider;
        mYdecimalSlider->setMinimumWidth(CURVE_SLIDER_WIDTH);
        mYdecimalSlider->setOrientation(Qt::Horizontal);
        mYdecimalSlider->setRange(0, 8);
        mYdecimalSlider->setTickInterval(1);
        connect(mYdecimalSlider, SIGNAL(valueChanged(int)), this, SLOT(sliderYValueChanged(int)));
        yDecimialLayout->addWidget(label, 1);
        yDecimialLayout->addWidget(mYdecimalSlider, 1);
        yLayout->addLayout(yDecimialLayout, 1);

        // Add to toolbar
        QFrame* frame = new QFrame;
        xLayout->addStretch(1000);
        yLayout->addStretch(1000);
        layout->addLayout(xLayout, 1);
        layout->addLayout(yLayout, 1);
        layout->addStretch(1000);
        frame->setLayout(layout);
        mHToolBar->addWidget(frame);
    }

    //****************************************************************************/
    void QtCurveDialog::doCurveFitHorToolbarAction(void)
    {
        mScene->fitHorizontal();
        refreshToolbarValues();
    }

    //****************************************************************************/
    void QtCurveDialog::doCurveFitVertToolbarAction(void)
    {
        mScene->fitVertical();
        refreshToolbarValues();
    }

    //****************************************************************************/
    void QtCurveDialog::doCurveZoomInToolbarAction(void)
    {
        mScene->zoomIn();
        refreshToolbarValues();
    }

    //****************************************************************************/
    void QtCurveDialog::doCurveZoomOutToolbarAction(void)
    {
        mScene->zoomOut();
        refreshToolbarValues();
    }

    //****************************************************************************/
    void QtCurveDialog::doCurveEditToolbarAction(void)
    {
        mCurveEditToolbarAction->setIcon(QIcon(mIconDir + CURVE_ICON_EDIT_ON));
        mCurveSelectToolbarAction->setIcon(QIcon(mIconDir + CURVE_ICON_SELECT));
        mCurveMoveToolbarAction->setIcon(QIcon(mIconDir + CURVE_ICON_MOVE));
        mScene->setMode(QtCurveGrid::EDIT);
    }

    //****************************************************************************/
    void QtCurveDialog::doCurveSelectToolbarAction(void)
    {
        mCurveEditToolbarAction->setIcon(QIcon(mIconDir + CURVE_ICON_EDIT));
        mCurveSelectToolbarAction->setIcon(QIcon(mIconDir + CURVE_ICON_SELECT_ON));
        mCurveMoveToolbarAction->setIcon(QIcon(mIconDir + CURVE_ICON_MOVE));
        mScene->setMode(QtCurveGrid::SELECT);
        //mView->setDragMode(QGraphicsView::RubberBandDrag);
    }

    //****************************************************************************/
    void QtCurveDialog::doCurveMoveToolbarAction(void)
    {
        mCurveEditToolbarAction->setIcon(QIcon(mIconDir + CURVE_ICON_EDIT));
        mCurveSelectToolbarAction->setIcon(QIcon(mIconDir + CURVE_ICON_SELECT));
        mCurveMoveToolbarAction->setIcon(QIcon(mIconDir + CURVE_ICON_MOVE_ON));
        mScene->setMode(QtCurveGrid::MOVE);
        //mView->setDragMode(QGraphicsView::NoDrag);
    }

    //****************************************************************************/
    void QtCurveDialog::doPivotToolbarAction(void)
    {
        // Set to default
        mScene->setStep(30);
        mScene->setXmin(0.0f);
        mScene->setYmin(0.0f);
        mScene->setXstep(0.5f);
        mScene->setYstep(0.5f);
        mScene->setDecimalX(1);
        mScene->setDecimalY(1);
        refreshToolbarValues();
    }

    //****************************************************************************/
    void QtCurveDialog::doDeletePointsToolbarAction(void)
    {
        mScene->deletePoints();
    }

    //****************************************************************************/
    void QtCurveDialog::wheelEvent (QWheelEvent* event)
    {
        // Delegate it to the scene
        mScene->wheelEvent(event);
        refreshToolbarValues();
        event->accept();
    }

    //****************************************************************************/
    void QtCurveDialog::resizeEvent (QResizeEvent* event)
    {
        mScene->refresh();
        event->accept();
    }

    //****************************************************************************/
    void QtCurveDialog::keyPressEvent(QKeyEvent* event)
    {
        if(event->key() == Qt::Key_Delete)
        {
            mScene->deletePoints();
        }
    }

    //****************************************************************************/
    void QtCurveDialog::refresh (void)
    {
        // Update the viewport
        QWidget* viewport = mView->viewport();
        viewport->update();
    }

    //****************************************************************************/
    void QtCurveDialog::handleSelectionChanged(int index)
    {
        if (!mScene)
            return;

        switch (index)
        {
            case 0:
            {
                mScene->setDrawType(QtCurveGrid::STRAIGHTLINE_UNSORTED);
            }
            break;

            case 1:
            {
                mScene->setDrawType(QtCurveGrid::STRAIGHTLINE_SORTED);
            }
            break;

            case 2:
            {
                mScene->setDrawType(QtCurveGrid::CUBIC_UNSORTED);
            }
            break;

            case 3:
            {
                mScene->setDrawType(QtCurveGrid::CUBIC_SORTED);
            }
            break;
        }
    }

    //****************************************************************************/
    void QtCurveDialog::accept (void)
    {
        mCurvePixmap = QPixmap::grabWidget(mView);
        QDialog::accept();
    }

    //****************************************************************************/
    void QtCurveDialog::sliderXValueChanged(int decimals)
    {
        mScene->setDecimalX(decimals);
        refreshToolbarValues();
    }

    //****************************************************************************/
    void QtCurveDialog::sliderYValueChanged(int decimals)
    {
        mScene->setDecimalY(decimals);
        refreshToolbarValues();
    }

    //****************************************************************************/
    void QtCurveDialog::xMinEditChanged(QString value)
    {
        mScene->setXmin(QVariant(value).toReal());
    }

    //****************************************************************************/
    void QtCurveDialog::xStepEditChanged(QString value)
    {
        mScene->setXstep(QVariant(value).toReal());
    }

    //****************************************************************************/
    void QtCurveDialog::yMinEditChanged(QString value)
    {
        mScene->setYmin(QVariant(value).toReal());
    }

    //****************************************************************************/
    void QtCurveDialog::yStepEditChanged(QString value)
    {
        mScene->setYstep(QVariant(value).toReal());
    }

    //****************************************************************************/
    void QtCurveDialog::refreshToolbarValues(void)
    {
        QString strVal;
        if (mXminEdit)
        {
            strVal = QString::number(mScene->getXmin(), 'f', mScene->getDecimalX());
            mXminEdit->setText(strVal);
        }

        if (mXstepEdit)
        {
            strVal = QString::number(mScene->getXstep(), 'f', mScene->getDecimalX());
            mXstepEdit->setText(strVal);
        }

        if (mXdecimalSlider)
            mXdecimalSlider->setValue(mScene->getDecimalX());

        if (mYminEdit)
        {
            strVal = QString::number(mScene->getYmin(), 'f', mScene->getDecimalY());
            mYminEdit->setText(strVal);
        }

        if (mYstepEdit)
        {
            strVal = QString::number(mScene->getYstep(), 'f', mScene->getDecimalY());
            mYstepEdit->setText(strVal);
        }

        if (mYdecimalSlider)
            mYdecimalSlider->setValue(mScene->getDecimalY());
    }
}
