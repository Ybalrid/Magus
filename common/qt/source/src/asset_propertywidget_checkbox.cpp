/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QVBoxLayout>
#include <QLabel>
#include "asset_propertywidget_checkbox.h"

namespace Magus
{
    //****************************************************************************/
    QtCheckBoxProperty::QtCheckBoxProperty(const QString& title, QWidget* parent) : QtProperty(parent)
    {
        QVBoxLayout* mainLayout = new QVBoxLayout;
        QHBoxLayout* horizontalLayout = new QHBoxLayout;
        mainLayout->setContentsMargins(5, 0, 5, 0);
        QLabel* label = new QLabel(title);
        mCheckBox = new QCheckBox();
        mCheckBox->setStyleSheet(QString("color: #c8c8c8;spacing: 5px;background: transparent;"));
        connect(mCheckBox, SIGNAL(stateChanged(int)), this, SLOT(propertyValueChanged(void)));

        // Layout
        horizontalLayout->addWidget(label, 1);
        horizontalLayout->addWidget(mCheckBox, 2);
        mainLayout->addLayout(horizontalLayout);
        setLayout(mainLayout);
        mType = CHECKBOX;
    }

    //****************************************************************************/
    void QtCheckBoxProperty::setValue (const bool value)
    {
        mCheckBox->setChecked(value);
    }

    //****************************************************************************/
    const bool QtCheckBoxProperty::getValue (void) const
    {
        return mCheckBox->isChecked();
    }

    //****************************************************************************/
    void QtCheckBoxProperty::propertyValueChanged(void)
    {
        emit valueChanged(this);
    }
}
