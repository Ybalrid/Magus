/****************************************************************************
**
** Copyright (C) 2014
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QMessageBox>
#include "ogre_asset_camera.h"
#include "asset_propertywidget_xyz.h"
#include "asset_propertywidget_string.h"
#include "asset_propertywidget_select.h"
#include "asset_propertywidget_slider.h"
#include "asset_propertywidget_decimal.h"

namespace Magus
{
    //****************************************************************************/
    QtOgreAssetCamera::QtOgreAssetCamera(const QString& iconDir, QWidget* parent) : QWidget(parent)
    {
        mOgreCamera = 0;

        // Create QtAssetWidget
        QVBoxLayout* mainLayout = new QVBoxLayout;
        mainLayout->setContentsMargins(0, 0, 0, 0);
        mAssetWidget = new QtAssetWidget(QString("Camera"),
                                         iconDir + QString("camera.png"),
                                         this);
        mAssetWidget->setFileNameIconCollapsed(iconDir + QString("collapse.png"));
        mAssetWidget->setFileNameIconExpanded(iconDir + QString("expand.png"));
        mAssetWidget->setHeaderTitleBold();
        connect(mAssetWidget, SIGNAL(containerAction2Clicked(QtContainerWidget*)), this, SLOT(containerAction2Clicked(QtContainerWidget*)));
        connect(mAssetWidget, SIGNAL(valueChanged(QtProperty*)), this, SLOT(propertyValueChanged(QtProperty*)));

        // Create container - General
        QtContainerWidget* container = 0;
        container = mAssetWidget->createContainer(CONTAINER_GENERAL, QString("General"));
        container->setAction2Icon(iconDir + QString("cog.png"));
        container->setTitleIcon(iconDir + QString("cube_bold.png"));
        container->setTitleBold();

        mAssetWidget->createProperty(CONTAINER_GENERAL, CAMERA_NAME_PROPERTY, QString("Camera name"), QtProperty::STRING, true);
        mAssetWidget->createProperty(CONTAINER_GENERAL, CAMERA_DIRECTION_PROPERTY, QString("Direction"), QtProperty::XYZ);

        QStringList stringList;
        stringList << QString("Perspective") << QString("Orthographic");
        QtSelectProperty* selectProperty = static_cast<QtSelectProperty*>
                                            (mAssetWidget->createProperty(CONTAINER_GENERAL,
                                            CAMERA_PROJECTION_PROPERTY,
                                            QString("Projection"),
                                            QtProperty::SELECT));
        selectProperty->addValues(stringList);

        QtSliderProperty* sliderProperty = static_cast<QtSliderProperty*>
                                            (mAssetWidget->createProperty(CONTAINER_GENERAL,
                                            CAMERA_FOV_PROPERTY,
                                            QString("Field of view"),
                                            QtProperty::SLIDER));
        sliderProperty->setSliderRange(0, 360, 1);

         mAssetWidget->createProperty(CONTAINER_GENERAL, CAMERA_NEAR_CLIP_DISTANCE_PROPERTY, QString("Near clip distance"), QtProperty::DECIMAL);
         mAssetWidget->createProperty(CONTAINER_GENERAL, CAMERA_FAR_CLIP_DISTANCE_PROPERTY, QString("Far clip distance"), QtProperty::DECIMAL);

        // Create container - Transform
        container = mAssetWidget->createContainer(CONTAINER_TRANSFORM, QString("Transform"));
        container->setAction2Icon(iconDir + QString("cog.png"));
        container->setTitleBold();
        container->setTitleIcon(iconDir + QString("axis_bold.png"));
        mAssetWidget->createProperty(CONTAINER_TRANSFORM, CAMERA_POSITION_PROPERTY, QString("Position"), QtProperty::XYZ);
        mAssetWidget->createProperty(CONTAINER_TRANSFORM, CAMERA_ROTATION_PROPERTY, QString("Rotation"), QtProperty::XYZ);

         // Layout
        mainLayout->addWidget(mAssetWidget);
        setLayout(mainLayout);
    }

    //****************************************************************************/
    QtOgreAssetCamera::~QtOgreAssetCamera(void)
    {
    }

    //****************************************************************************/
    void QtOgreAssetCamera::expandAll(void)
    {
        if (mAssetWidget)
            mAssetWidget->expandAllContainers();
    }

    //****************************************************************************/
    void QtOgreAssetCamera::collapseAll(void)
    {
        if (mAssetWidget)
            mAssetWidget->collapseAllContainers();
    }

    //****************************************************************************/
    void QtOgreAssetCamera::bindObject (Ogre::Camera* camera)
    {
        mOgreCamera = camera; // Allow null value cameras
        if (!camera)
            return;

        // Set the properties, based on the camera settings
        // Container 0 - position
        QtXYZProperty* xyzProperty = static_cast<QtXYZProperty*>(mAssetWidget->getPropertyWidget(CAMERA_POSITION_PROPERTY));
        Ogre::Vector3 pos = camera->getPosition();
        xyzProperty->setXYZ(pos.x, pos.y, pos.z);

        // Container 0 - rotation
        xyzProperty = static_cast<QtXYZProperty*>(mAssetWidget->getPropertyWidget(CAMERA_ROTATION_PROPERTY));
        Ogre::Quaternion rot = camera->getOrientation();
        xyzProperty->setXYZ(rot.getPitch().valueDegrees(), rot.getYaw().valueDegrees(), rot.getRoll().valueDegrees());

        // Container 1 - name
        QtStringProperty* stringProperty = static_cast<QtStringProperty*>(mAssetWidget->getPropertyWidget(CAMERA_NAME_PROPERTY));
        const char* ch = camera->getName().c_str();
        stringProperty->setString(QString(ch));

        // Container 1 - direction
        xyzProperty = static_cast<QtXYZProperty*>(mAssetWidget->getPropertyWidget(CAMERA_DIRECTION_PROPERTY));
        Ogre::Vector3 dir = camera->getDirection();
        xyzProperty->setXYZ(dir.x, dir.y, dir.z);

        // Container 1 - projection type
        QtSelectProperty* selectProperty = static_cast<QtSelectProperty*>(mAssetWidget->getPropertyWidget(CAMERA_PROJECTION_PROPERTY));
        if (camera->getProjectionType() == Ogre::PT_PERSPECTIVE)
            selectProperty->setCurentIndex(0);
        else
            selectProperty->setCurentIndex(1);

        // Container 1 - field of view
        QtSliderProperty* sliderProperty = static_cast<QtSliderProperty*>(mAssetWidget->getPropertyWidget(CAMERA_FOV_PROPERTY));
        sliderProperty->setValue(camera->getFOVy().valueDegrees());

        // Container 1 - near clip distance
        QtDecimalProperty* decimalProperty = static_cast<QtDecimalProperty*>(mAssetWidget->getPropertyWidget(CAMERA_NEAR_CLIP_DISTANCE_PROPERTY));
        decimalProperty->setValue(camera->getNearClipDistance());

        // Container 1 - far clip distance
        decimalProperty = static_cast<QtDecimalProperty*>(mAssetWidget->getPropertyWidget(CAMERA_FAR_CLIP_DISTANCE_PROPERTY));
        decimalProperty->setValue(camera->getFarClipDistance());
    }

    //****************************************************************************/
    void QtOgreAssetCamera::containerAction2Clicked (QtContainerWidget* container)
    {
        if (!container)
            return;

        QtXYZProperty* xyzProperty = 0;
        QtSelectProperty* selectionProperty = 0;
        QtSliderProperty* sliderProperty = 0;
        QtDecimalProperty* decimalProperty = 0;
        switch (container->mContainerId)
        {
            case CONTAINER_GENERAL:
            {
                // Reset camera settings
                xyzProperty = static_cast<QtXYZProperty*>(container->getPropertyWidget(CAMERA_DIRECTION_PROPERTY));
                xyzProperty->setXYZ(0.0f, 0.0f, 0.0f);
                propertyValueChanged(xyzProperty);

                selectionProperty = static_cast<QtSelectProperty*>(container->getPropertyWidget(CAMERA_PROJECTION_PROPERTY));
                selectionProperty->setCurentIndex(0);
                propertyValueChanged(selectionProperty);

                sliderProperty = static_cast<QtSliderProperty*>(container->getPropertyWidget(CAMERA_FOV_PROPERTY));
                sliderProperty->setValue(45.0f);
                propertyValueChanged(sliderProperty);

                decimalProperty = static_cast<QtDecimalProperty*>(container->getPropertyWidget(CAMERA_NEAR_CLIP_DISTANCE_PROPERTY));
                decimalProperty->setValue(0.1f);
                propertyValueChanged(decimalProperty);

                decimalProperty = static_cast<QtDecimalProperty*>(container->getPropertyWidget(CAMERA_FAR_CLIP_DISTANCE_PROPERTY));
                decimalProperty->setValue(100000.0f);
                propertyValueChanged(decimalProperty);
            }
            break;

            case CONTAINER_TRANSFORM:
            {
                // Reset transformations
                xyzProperty = static_cast<QtXYZProperty*>(container->getPropertyWidget(CAMERA_POSITION_PROPERTY));
                xyzProperty->setXYZ(0.0f, 0.0f, 0.0f);
                propertyValueChanged(xyzProperty);

                xyzProperty = static_cast<QtXYZProperty*>(container->getPropertyWidget(CAMERA_ROTATION_PROPERTY));
                xyzProperty->setXYZ(0.0f, 0.0f, 0.0f);
                propertyValueChanged(xyzProperty);
            }
            break;

        }
    }

    //****************************************************************************/
    void QtOgreAssetCamera::propertyValueChanged(QtProperty* property)
    {
        if (!mOgreCamera || !property)
            return;

        QtXYZProperty* xyzProperty = 0;
        QtSelectProperty* selectionProperty = 0;
        QtSliderProperty* sliderProperty = 0;
        QtDecimalProperty* decimalProperty = 0;
        switch (property->mPropertyId)
        {
            case CAMERA_POSITION_PROPERTY:
            {
                xyzProperty = static_cast<QtXYZProperty*>(property);
                mOgreCamera->setPosition(xyzProperty->getX(), xyzProperty->getY(), xyzProperty->getZ());
            }
            break;

            case CAMERA_ROTATION_PROPERTY:
            {
                xyzProperty = static_cast<QtXYZProperty*>(property);
                Ogre::Quaternion q(1.0f, xyzProperty->getX(), xyzProperty->getY(), xyzProperty->getZ());
                mOgreCamera->setOrientation(q);
            }
            break;

            case CAMERA_DIRECTION_PROPERTY:
            {
                xyzProperty = static_cast<QtXYZProperty*>(property);
                mOgreCamera->lookAt(xyzProperty->getX(), xyzProperty->getY(), xyzProperty->getZ());
            }
            break;

            case CAMERA_PROJECTION_PROPERTY:
            {
                selectionProperty = static_cast<QtSelectProperty*>(property);
                if (selectionProperty->getCurrentIndex() == 0)
                    mOgreCamera->setProjectionType(Ogre::PT_PERSPECTIVE);
                else
                    mOgreCamera->setProjectionType(Ogre::PT_ORTHOGRAPHIC);
            }
            break;

            case CAMERA_FOV_PROPERTY:
            {
                sliderProperty = static_cast<QtSliderProperty*>(property);
                mOgreCamera->setFOVy(Ogre::Radian(Ogre::Degree(sliderProperty->getFloatValue())));
            }
            break;

            case CAMERA_NEAR_CLIP_DISTANCE_PROPERTY:
            {
                decimalProperty = static_cast<QtDecimalProperty*>(property);
                mOgreCamera->setNearClipDistance(decimalProperty->getValue());
            }
            break;

            case CAMERA_FAR_CLIP_DISTANCE_PROPERTY:
            {
                decimalProperty = static_cast<QtDecimalProperty*>(property);
                mOgreCamera->setFarClipDistance(decimalProperty->getValue());
            }
            break;
        }
    }
}

