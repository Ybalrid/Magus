/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QVBoxLayout>
#include <QMessageBox>
#include <QColorDialog>
#include <QRegExpValidator>
#include "asset_propertywidget_color.h"

namespace Magus
{
    //****************************************************************************/
    QtColorProperty::QtColorProperty(const QString& title, QWidget* parent) : QtProperty(parent)
    {
        QVBoxLayout* mainLayout = new QVBoxLayout;
        QHBoxLayout* horizontalLayout1 = new QHBoxLayout;
        QHBoxLayout* horizontalLayoutRGBA = new QHBoxLayout;
        QHBoxLayout* horizontalLayout2 = new QHBoxLayout;
        QHBoxLayout* horizontalLayoutHex = new QHBoxLayout;
        QHBoxLayout* horizontalLayoutHexAndButton = new QHBoxLayout;
        mainLayout->setContentsMargins(5, 0, 5, 0);
        QLabel* label = new QLabel(title);
        QLabel* labelR = new QLabel(QString("R"));
        QLabel* labelG = new QLabel(QString("G"));
        QLabel* labelB = new QLabel(QString("B"));
        mLabelA = new QLabel(QString("A"));
        QLabel* labelHex = new QLabel(QString("Hex"));
        mR = new QLineEdit;
        mG = new QLineEdit;
        mB = new QLineEdit;
        mA = new QLineEdit;
        mHex = new QLineEdit;
        mColorFill = new QLabel;
        mColorFill->setAutoFillBackground(true);
        updateColorFill();
        QRegExp regularExpression1("^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$"); // unsigned integer [0..255]
        QRegExp regularExpression2("^[0-9-a-fA-F]{0,6}$"); // max 6 characters
        QRegExpValidator* validator1 = new QRegExpValidator(regularExpression1);
        QRegExpValidator* validator2 = new QRegExpValidator(regularExpression2);
        mR->setValidator(validator1);
        mG->setValidator(validator1);
        mB->setValidator(validator1);
        mA->setValidator(validator1);
        mHex->setValidator(validator2);

        mDialogButton = new QPushButton(QString(" .. "));
        connect(mR, SIGNAL(textEdited(QString)), this, SLOT(propertyValueChangedRGBA(void)));
        connect(mG, SIGNAL(textEdited(QString)), this, SLOT(propertyValueChangedRGBA(void)));
        connect(mB, SIGNAL(textEdited(QString)), this, SLOT(propertyValueChangedRGBA(void)));
        connect(mA, SIGNAL(textEdited(QString)), this, SLOT(propertyValueChangedRGBA(void)));
        connect(mHex, SIGNAL(textEdited(QString)), this, SLOT(propertyValueChangedHex(void)));
        connect(mDialogButton, SIGNAL(clicked(bool)), this, SLOT(dialogButtonClicked(void)));

        // Layout
        horizontalLayoutRGBA->addWidget(labelR);
        horizontalLayoutRGBA->addWidget(mR);
        horizontalLayoutRGBA->addWidget(labelG);
        horizontalLayoutRGBA->addWidget(mG);
        horizontalLayoutRGBA->addWidget(labelB);
        horizontalLayoutRGBA->addWidget(mB);
        horizontalLayoutRGBA->addWidget(mLabelA);
        horizontalLayoutRGBA->addWidget(mA);
        horizontalLayout1->addWidget(label, 1);
        horizontalLayout1->addLayout(horizontalLayoutRGBA, 2);
        horizontalLayoutHex->addWidget(labelHex, 1);
        horizontalLayoutHex->addWidget(mHex, 10);
        horizontalLayoutHex->addWidget(mColorFill,10);
        horizontalLayoutHexAndButton->addLayout(horizontalLayoutHex, 10);
        horizontalLayoutHexAndButton->addStretch(4);
        horizontalLayoutHexAndButton->addWidget(mDialogButton, 1);
        horizontalLayout2->addStretch(1);
        horizontalLayout2->addLayout(horizontalLayoutHexAndButton, 2);
        mainLayout->addLayout(horizontalLayout1);
        mainLayout->addLayout(horizontalLayout2);
        setLayout(mainLayout);
        mType = COLOR;
    }

    //****************************************************************************/
    void QtColorProperty::setAlphaVisible(bool enabled)
    {
        mA->setVisible(enabled);
        mLabelA->setVisible(enabled);
    }

    //****************************************************************************/
    void QtColorProperty::updateRGBAWithCurrentColor(void)
    {
        mR->setText(QVariant(mColorValue.red()).toString());
        mG->setText(QVariant(mColorValue.green()).toString());
        mB->setText(QVariant(mColorValue.blue()).toString());
        mA->setText(QVariant(mColorValue.alpha()).toString());
    }

    //****************************************************************************/
    void QtColorProperty::updateHexWithCurrentColor(void)
    {
        QString h = mColorValue.name();
        h.remove(QRegExp(QString::fromUtf8("#")));
        mHex->setText(h);
    }

    //****************************************************************************/
    void QtColorProperty::setColor (unsigned int r, unsigned int g, unsigned int b, unsigned int a)
    {
        mColorValue = QColor(r, g, b, a);
        updateRGBAWithCurrentColor();
        updateHexWithCurrentColor();
        updateColorFill();
    }

    //****************************************************************************/
    const QColor& QtColorProperty::getColor (void) const
    {
        return mColorValue;
    }

    //****************************************************************************/
    unsigned int QtColorProperty::getRed (void) const
    {
        return mColorValue.red();
    }

    //****************************************************************************/
    unsigned int QtColorProperty::getGreen (void) const
    {
        return mColorValue.green();
    }

    //****************************************************************************/
    unsigned int QtColorProperty::getBlue (void) const
    {
        return mColorValue.blue();
    }

    //****************************************************************************/
    unsigned int QtColorProperty::getAlpha (void) const
    {
        return mColorValue.alpha();
    }

    //****************************************************************************/
    void QtColorProperty::updateColorFill (void)
    {
        QString left = QString("background-color: rgb(");
        QString mid = QVariant(mColorValue.red()).toString() + QString(",") +
                      QVariant(mColorValue.green()).toString() + QString(",") +
                      QVariant(mColorValue.blue()).toString();
        QString right = QString("); border: 1px solid #000000;");
        mColorFill->setStyleSheet(left + mid + right);
    }

    //****************************************************************************/
    void QtColorProperty::propertyValueChangedRGBA(void)
    {
        mColorValue = QColor(QVariant(mR->text()).toInt(),
                             QVariant(mG->text()).toInt(),
                             QVariant(mB->text()).toInt(),
                             QVariant(mA->text()).toInt());
        updateHexWithCurrentColor();
        updateColorFill();
        emit valueChanged(this);
    }

    //****************************************************************************/
    void QtColorProperty::dialogButtonClicked(void)
    {
        QColorDialog dialog;
        QColor c = dialog.getColor();
        mColorValue = c;
        updateHexWithCurrentColor();
        propertyValueChangedHex();
    }

    //****************************************************************************/
    void QtColorProperty::propertyValueChangedHex(void)
    {
        mColorValue.setNamedColor(QString("#") + mHex->text());
        updateRGBAWithCurrentColor();
        updateColorFill();
        emit valueChanged(this);
    }
}
